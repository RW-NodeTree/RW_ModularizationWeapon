### YamlMime:ManagedReference
items:
- uid: RW_ModularizationWeapon.Tools.ToolsFunction
  commentId: T:RW_ModularizationWeapon.Tools.ToolsFunction
  id: ToolsFunction
  parent: RW_ModularizationWeapon.Tools
  children:
  - RW_ModularizationWeapon.Tools.ToolsFunction.GetOrNewWhenNull``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1})
  - RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
  langs:
  - csharp
  - vb
  name: ToolsFunction
  nameWithType: ToolsFunction
  fullName: RW_ModularizationWeapon.Tools.ToolsFunction
  type: Class
  source:
    remote:
      path: src/RW_ModularizationWeapon/Tools/Tools.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: ToolsFunction
    path: Tools/Tools.cs
    startLine: 8
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon.Tools
  syntax:
    content: public static class ToolsFunction
    content.vb: Public Module ToolsFunction
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: RW_ModularizationWeapon.Tools.ToolsFunction.GetOrNewWhenNull``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1})
  commentId: M:RW_ModularizationWeapon.Tools.ToolsFunction.GetOrNewWhenNull``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1})
  id: GetOrNewWhenNull``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1})
  isExtensionMethod: true
  parent: RW_ModularizationWeapon.Tools.ToolsFunction
  langs:
  - csharp
  - vb
  name: GetOrNewWhenNull<TK, TV>(Dictionary<TK, TV>, TK, Func<TV>)
  nameWithType: ToolsFunction.GetOrNewWhenNull<TK, TV>(Dictionary<TK, TV>, TK, Func<TV>)
  fullName: RW_ModularizationWeapon.Tools.ToolsFunction.GetOrNewWhenNull<TK, TV>(System.Collections.Generic.Dictionary<TK, TV>, TK, System.Func<TV>)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/Tools/Tools.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: GetOrNewWhenNull
    path: Tools/Tools.cs
    startLine: 10
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon.Tools
  syntax:
    content: public static TV GetOrNewWhenNull<TK, TV>(this Dictionary<TK, TV> dictonary, TK key, Func<TV> funcCreate)
    parameters:
    - id: dictonary
      type: System.Collections.Generic.Dictionary{{TK},{TV}}
    - id: key
      type: '{TK}'
    - id: funcCreate
      type: System.Func{{TV}}
    typeParameters:
    - id: TK
    - id: TV
    return:
      type: '{TV}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrNewWhenNull(Of TK, TV)(dictonary As Dictionary(Of TK, TV), key As TK, funcCreate As Func(Of TV)) As TV
  overload: RW_ModularizationWeapon.Tools.ToolsFunction.GetOrNewWhenNull*
  nameWithType.vb: ToolsFunction.GetOrNewWhenNull(Of TK, TV)(Dictionary(Of TK, TV), TK, Func(Of TV))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: RW_ModularizationWeapon.Tools.ToolsFunction.GetOrNewWhenNull(Of TK, TV)(System.Collections.Generic.Dictionary(Of TK, TV), TK, System.Func(Of TV))
  name.vb: GetOrNewWhenNull(Of TK, TV)(Dictionary(Of TK, TV), TK, Func(Of TV))
- uid: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
  commentId: M:RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
  id: LogAllField(System.Object)
  isExtensionMethod: true
  parent: RW_ModularizationWeapon.Tools.ToolsFunction
  langs:
  - csharp
  - vb
  name: LogAllField(Object)
  nameWithType: ToolsFunction.LogAllField(Object)
  fullName: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/Tools/Tools.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: LogAllField
    path: Tools/Tools.cs
    startLine: 23
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon.Tools
  syntax:
    content: public static void LogAllField(this object obj)
    parameters:
    - id: obj
      type: System.Object
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub LogAllField(obj As Object)
  overload: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: RW_ModularizationWeapon.Tools
  commentId: N:RW_ModularizationWeapon.Tools
  name: RW_ModularizationWeapon.Tools
  nameWithType: RW_ModularizationWeapon.Tools
  fullName: RW_ModularizationWeapon.Tools
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: RW_ModularizationWeapon.Tools.ToolsFunction.GetOrNewWhenNull*
  commentId: Overload:RW_ModularizationWeapon.Tools.ToolsFunction.GetOrNewWhenNull
  name: GetOrNewWhenNull
  nameWithType: ToolsFunction.GetOrNewWhenNull
  fullName: RW_ModularizationWeapon.Tools.ToolsFunction.GetOrNewWhenNull
- uid: System.Collections.Generic.Dictionary{{TK},{TV}}
  commentId: T:System.Collections.Generic.Dictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TK, TV>
  nameWithType: Dictionary<TK, TV>
  fullName: System.Collections.Generic.Dictionary<TK, TV>
  nameWithType.vb: Dictionary(Of TK, TV)
  fullName.vb: System.Collections.Generic.Dictionary(Of TK, TV)
  name.vb: Dictionary(Of TK, TV)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TK
    nameWithType: TK
    fullName: TK
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TK
    nameWithType: TK
    fullName: TK
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TK}'
  commentId: '!:TK'
  definition: TK
  name: TK
  nameWithType: TK
  fullName: TK
- uid: System.Func{{TV}}
  commentId: T:System.Func{``1}
  parent: System
  definition: System.Func`1
  name: Func<TV>
  nameWithType: Func<TV>
  fullName: System.Func<TV>
  nameWithType.vb: Func(Of TV)
  fullName.vb: System.Func(Of TV)
  name.vb: Func(Of TV)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TV}'
  commentId: '!:TV'
  definition: TV
  name: TV
  nameWithType: TV
  fullName: TV
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TK
  commentId: '!:TK'
  name: TK
  nameWithType: TK
  fullName: TK
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TV
  name: TV
  nameWithType: TV
  fullName: TV
- uid: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField*
  commentId: Overload:RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
  name: LogAllField
  nameWithType: ToolsFunction.LogAllField
  fullName: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
