### YamlMime:ManagedReference
items:
- uid: RW_ModularizationWeapon.FieldReader`2
  commentId: T:RW_ModularizationWeapon.FieldReader`2
  id: FieldReader`2
  parent: RW_ModularizationWeapon
  children:
  - RW_ModularizationWeapon.FieldReader`2.Add(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  - RW_ModularizationWeapon.FieldReader`2.Add(System.RuntimeFieldHandle,`1)
  - RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`0)
  - RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`1)
  - RW_ModularizationWeapon.FieldReader`2.CalcValue``1(System.Func{`1,`1,System.Reflection.FieldInfo,`1},``0,``0)
  - RW_ModularizationWeapon.FieldReader`2.Clear
  - RW_ModularizationWeapon.FieldReader`2.Clone
  - RW_ModularizationWeapon.FieldReader`2.Contains(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  - RW_ModularizationWeapon.FieldReader`2.ContainsKey(System.RuntimeFieldHandle)
  - RW_ModularizationWeapon.FieldReader`2.CopyTo(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}[],System.Int32)
  - RW_ModularizationWeapon.FieldReader`2.Count
  - RW_ModularizationWeapon.FieldReader`2.DefaultValue
  - RW_ModularizationWeapon.FieldReader`2.GetEnumerator
  - RW_ModularizationWeapon.FieldReader`2.HasDefaultValue
  - RW_ModularizationWeapon.FieldReader`2.IsReadOnly
  - RW_ModularizationWeapon.FieldReader`2.Item(System.RuntimeFieldHandle)
  - RW_ModularizationWeapon.FieldReader`2.Keys
  - RW_ModularizationWeapon.FieldReader`2.LoadDataFromXmlCustom(System.Xml.XmlNode)
  - RW_ModularizationWeapon.FieldReader`2.Remove(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  - RW_ModularizationWeapon.FieldReader`2.Remove(System.RuntimeFieldHandle)
  - RW_ModularizationWeapon.FieldReader`2.System#Collections#IEnumerable#GetEnumerator
  - RW_ModularizationWeapon.FieldReader`2.TryGetValue(System.RuntimeFieldHandle,`1@)
  - RW_ModularizationWeapon.FieldReader`2.UsedType
  - RW_ModularizationWeapon.FieldReader`2.UsedTypeUpdate
  - RW_ModularizationWeapon.FieldReader`2.Values
  langs:
  - csharp
  - vb
  name: FieldReader<T, TV>
  nameWithType: FieldReader<T, TV>
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>
  type: Class
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: FieldReader
    path: FieldReader.cs
    startLine: 16
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  summary: "\nabstract type for instance calculation\n"
  example: []
  syntax:
    content: 'public abstract class FieldReader<T, TV> : IDictionary<RuntimeFieldHandle, TV>, ICollection<KeyValuePair<RuntimeFieldHandle, TV>>, IEnumerable<KeyValuePair<RuntimeFieldHandle, TV>>, IEnumerable'
    typeParameters:
    - id: T
      description: instance base type for calculation
    - id: TV
      description: instance properties base type for calculation
    content.vb: >-
      Public MustInherit Class FieldReader(Of T, TV)
          Implements IDictionary(Of RuntimeFieldHandle, TV), ICollection(Of KeyValuePair(Of RuntimeFieldHandle, TV)), IEnumerable(Of KeyValuePair(Of RuntimeFieldHandle, TV)), IEnumerable
  inheritance:
  - System.Object
  derivedClasses:
  - RW_ModularizationWeapon.FieldReaderBoolean`1
  - RW_ModularizationWeapon.FieldReaderDigit`1
  - RW_ModularizationWeapon.FieldReaderFilt`1
  - RW_ModularizationWeapon.FieldReaderInstance`1
  implements:
  - System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - System.Object.RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
  nameWithType.vb: FieldReader(Of T, TV)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV)
  name.vb: FieldReader(Of T, TV)
- uid: RW_ModularizationWeapon.FieldReader`2.UsedType
  commentId: P:RW_ModularizationWeapon.FieldReader`2.UsedType
  id: UsedType
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: UsedType
  nameWithType: FieldReader<T, TV>.UsedType
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.UsedType
  type: Property
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: UsedType
    path: FieldReader.cs
    startLine: 22
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  summary: "\ncurrent using type\n"
  example: []
  syntax:
    content: public Type UsedType { get; set; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public Property UsedType As Type
  overload: RW_ModularizationWeapon.FieldReader`2.UsedType*
  nameWithType.vb: FieldReader(Of T, TV).UsedType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).UsedType
- uid: RW_ModularizationWeapon.FieldReader`2.DefaultValue
  commentId: P:RW_ModularizationWeapon.FieldReader`2.DefaultValue
  id: DefaultValue
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: DefaultValue
  nameWithType: FieldReader<T, TV>.DefaultValue
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.DefaultValue
  type: Property
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: DefaultValue
    path: FieldReader.cs
    startLine: 42
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  summary: "\ndefault properties value, if this calculation instance containe field\n"
  example: []
  syntax:
    content: public abstract TV DefaultValue { get; set; }
    parameters: []
    return:
      type: '{TV}'
    content.vb: Public MustOverride Property DefaultValue As TV
  overload: RW_ModularizationWeapon.FieldReader`2.DefaultValue*
  nameWithType.vb: FieldReader(Of T, TV).DefaultValue
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).DefaultValue
- uid: RW_ModularizationWeapon.FieldReader`2.HasDefaultValue
  commentId: P:RW_ModularizationWeapon.FieldReader`2.HasDefaultValue
  id: HasDefaultValue
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: HasDefaultValue
  nameWithType: FieldReader<T, TV>.HasDefaultValue
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.HasDefaultValue
  type: Property
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: HasDefaultValue
    path: FieldReader.cs
    startLine: 46
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  summary: "\ncheck default value of this instance\n"
  example: []
  syntax:
    content: public abstract bool HasDefaultValue { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public MustOverride ReadOnly Property HasDefaultValue As Boolean
  overload: RW_ModularizationWeapon.FieldReader`2.HasDefaultValue*
  nameWithType.vb: FieldReader(Of T, TV).HasDefaultValue
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).HasDefaultValue
- uid: RW_ModularizationWeapon.FieldReader`2.Item(System.RuntimeFieldHandle)
  commentId: P:RW_ModularizationWeapon.FieldReader`2.Item(System.RuntimeFieldHandle)
  id: Item(System.RuntimeFieldHandle)
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: Item[RuntimeFieldHandle]
  nameWithType: FieldReader<T, TV>.Item[RuntimeFieldHandle]
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Item[System.RuntimeFieldHandle]
  type: Property
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: this[]
    path: FieldReader.cs
    startLine: 52
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  summary: "\nvalue of instance propertie on specific field for calculation\n"
  example: []
  syntax:
    content: public abstract TV this[RuntimeFieldHandle key] { get; set; }
    parameters:
    - id: key
      type: System.RuntimeFieldHandle
      description: specific field
    return:
      type: '{TV}'
      description: specific field for calculation
    content.vb: Public MustOverride Property Item(key As RuntimeFieldHandle) As TV
  overload: RW_ModularizationWeapon.FieldReader`2.Item*
  implements:
  - System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}.Item(System.RuntimeFieldHandle)
  nameWithType.vb: FieldReader(Of T, TV).Item(RuntimeFieldHandle)
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Item(System.RuntimeFieldHandle)
  name.vb: Item(RuntimeFieldHandle)
- uid: RW_ModularizationWeapon.FieldReader`2.Keys
  commentId: P:RW_ModularizationWeapon.FieldReader`2.Keys
  id: Keys
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: FieldReader<T, TV>.Keys
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Keys
  type: Property
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: Keys
    path: FieldReader.cs
    startLine: 56
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  summary: "\nfield container, defined what field will calculation\n"
  example: []
  syntax:
    content: public abstract ICollection<RuntimeFieldHandle> Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.RuntimeFieldHandle}
    content.vb: Public MustOverride ReadOnly Property Keys As ICollection(Of RuntimeFieldHandle)
  overload: RW_ModularizationWeapon.FieldReader`2.Keys*
  implements:
  - System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}.Keys
  nameWithType.vb: FieldReader(Of T, TV).Keys
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Keys
- uid: RW_ModularizationWeapon.FieldReader`2.Values
  commentId: P:RW_ModularizationWeapon.FieldReader`2.Values
  id: Values
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: FieldReader<T, TV>.Values
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Values
  type: Property
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: Values
    path: FieldReader.cs
    startLine: 60
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  summary: "\nvalue container, defined what values of each `Keys`\n"
  example: []
  syntax:
    content: public abstract ICollection<TV> Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TV}}
    content.vb: Public MustOverride ReadOnly Property Values As ICollection(Of TV)
  overload: RW_ModularizationWeapon.FieldReader`2.Values*
  implements:
  - System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}.Values
  nameWithType.vb: FieldReader(Of T, TV).Values
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Values
- uid: RW_ModularizationWeapon.FieldReader`2.Count
  commentId: P:RW_ModularizationWeapon.FieldReader`2.Count
  id: Count
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: FieldReader<T, TV>.Count
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Count
  type: Property
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: Count
    path: FieldReader.cs
    startLine: 64
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  summary: "\ndefined values count\n"
  example: []
  syntax:
    content: public abstract int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public MustOverride ReadOnly Property Count As Integer
  overload: RW_ModularizationWeapon.FieldReader`2.Count*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}.Count
  nameWithType.vb: FieldReader(Of T, TV).Count
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Count
- uid: RW_ModularizationWeapon.FieldReader`2.IsReadOnly
  commentId: P:RW_ModularizationWeapon.FieldReader`2.IsReadOnly
  id: IsReadOnly
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: FieldReader<T, TV>.IsReadOnly
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: IsReadOnly
    path: FieldReader.cs
    startLine: 66
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: RW_ModularizationWeapon.FieldReader`2.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}.IsReadOnly
  nameWithType.vb: FieldReader(Of T, TV).IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).IsReadOnly
- uid: RW_ModularizationWeapon.FieldReader`2.Add(System.RuntimeFieldHandle,`1)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.Add(System.RuntimeFieldHandle,`1)
  id: Add(System.RuntimeFieldHandle,`1)
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: Add(RuntimeFieldHandle, TV)
  nameWithType: FieldReader<T, TV>.Add(RuntimeFieldHandle, TV)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Add(System.RuntimeFieldHandle, TV)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: Add
    path: FieldReader.cs
    startLine: 68
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public abstract void Add(RuntimeFieldHandle key, TV value)
    parameters:
    - id: key
      type: System.RuntimeFieldHandle
    - id: value
      type: '{TV}'
    content.vb: Public MustOverride Sub Add(key As RuntimeFieldHandle, value As TV)
  overload: RW_ModularizationWeapon.FieldReader`2.Add*
  implements:
  - System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}.Add(System.RuntimeFieldHandle,{TV})
  nameWithType.vb: FieldReader(Of T, TV).Add(RuntimeFieldHandle, TV)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Add(System.RuntimeFieldHandle, TV)
- uid: RW_ModularizationWeapon.FieldReader`2.Clear
  commentId: M:RW_ModularizationWeapon.FieldReader`2.Clear
  id: Clear
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: FieldReader<T, TV>.Clear()
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Clear()
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: Clear
    path: FieldReader.cs
    startLine: 70
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public abstract void Clear()
    content.vb: Public MustOverride Sub Clear
  overload: RW_ModularizationWeapon.FieldReader`2.Clear*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}.Clear
  nameWithType.vb: FieldReader(Of T, TV).Clear()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Clear()
- uid: RW_ModularizationWeapon.FieldReader`2.ContainsKey(System.RuntimeFieldHandle)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.ContainsKey(System.RuntimeFieldHandle)
  id: ContainsKey(System.RuntimeFieldHandle)
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: ContainsKey(RuntimeFieldHandle)
  nameWithType: FieldReader<T, TV>.ContainsKey(RuntimeFieldHandle)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.ContainsKey(System.RuntimeFieldHandle)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: ContainsKey
    path: FieldReader.cs
    startLine: 72
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public abstract bool ContainsKey(RuntimeFieldHandle key)
    parameters:
    - id: key
      type: System.RuntimeFieldHandle
    return:
      type: System.Boolean
    content.vb: Public MustOverride Function ContainsKey(key As RuntimeFieldHandle) As Boolean
  overload: RW_ModularizationWeapon.FieldReader`2.ContainsKey*
  implements:
  - System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}.ContainsKey(System.RuntimeFieldHandle)
  nameWithType.vb: FieldReader(Of T, TV).ContainsKey(RuntimeFieldHandle)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).ContainsKey(System.RuntimeFieldHandle)
- uid: RW_ModularizationWeapon.FieldReader`2.Remove(System.RuntimeFieldHandle)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.Remove(System.RuntimeFieldHandle)
  id: Remove(System.RuntimeFieldHandle)
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: Remove(RuntimeFieldHandle)
  nameWithType: FieldReader<T, TV>.Remove(RuntimeFieldHandle)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Remove(System.RuntimeFieldHandle)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: Remove
    path: FieldReader.cs
    startLine: 74
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public abstract bool Remove(RuntimeFieldHandle key)
    parameters:
    - id: key
      type: System.RuntimeFieldHandle
    return:
      type: System.Boolean
    content.vb: Public MustOverride Function Remove(key As RuntimeFieldHandle) As Boolean
  overload: RW_ModularizationWeapon.FieldReader`2.Remove*
  implements:
  - System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}.Remove(System.RuntimeFieldHandle)
  nameWithType.vb: FieldReader(Of T, TV).Remove(RuntimeFieldHandle)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Remove(System.RuntimeFieldHandle)
- uid: RW_ModularizationWeapon.FieldReader`2.TryGetValue(System.RuntimeFieldHandle,`1@)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.TryGetValue(System.RuntimeFieldHandle,`1@)
  id: TryGetValue(System.RuntimeFieldHandle,`1@)
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: TryGetValue(RuntimeFieldHandle, out TV)
  nameWithType: FieldReader<T, TV>.TryGetValue(RuntimeFieldHandle, out TV)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.TryGetValue(System.RuntimeFieldHandle, out TV)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: TryGetValue
    path: FieldReader.cs
    startLine: 76
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public abstract bool TryGetValue(RuntimeFieldHandle key, out TV value)
    parameters:
    - id: key
      type: System.RuntimeFieldHandle
    - id: value
      type: '{TV}'
    return:
      type: System.Boolean
    content.vb: Public MustOverride Function TryGetValue(key As RuntimeFieldHandle, ByRef value As TV) As Boolean
  overload: RW_ModularizationWeapon.FieldReader`2.TryGetValue*
  implements:
  - System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}.TryGetValue(System.RuntimeFieldHandle,{TV}@)
  nameWithType.vb: FieldReader(Of T, TV).TryGetValue(RuntimeFieldHandle, ByRef TV)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).TryGetValue(System.RuntimeFieldHandle, ByRef TV)
  name.vb: TryGetValue(RuntimeFieldHandle, ByRef TV)
- uid: RW_ModularizationWeapon.FieldReader`2.Clone
  commentId: M:RW_ModularizationWeapon.FieldReader`2.Clone
  id: Clone
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: FieldReader<T, TV>.Clone()
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Clone()
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: Clone
    path: FieldReader.cs
    startLine: 78
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public abstract FieldReader<T, TV> Clone()
    return:
      type: RW_ModularizationWeapon.FieldReader`2
    content.vb: Public MustOverride Function Clone As FieldReader(Of T, TV)
  overload: RW_ModularizationWeapon.FieldReader`2.Clone*
  nameWithType.vb: FieldReader(Of T, TV).Clone()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Clone()
- uid: RW_ModularizationWeapon.FieldReader`2.UsedTypeUpdate
  commentId: M:RW_ModularizationWeapon.FieldReader`2.UsedTypeUpdate
  id: UsedTypeUpdate
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: UsedTypeUpdate()
  nameWithType: FieldReader<T, TV>.UsedTypeUpdate()
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.UsedTypeUpdate()
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: UsedTypeUpdate
    path: FieldReader.cs
    startLine: 80
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public abstract void UsedTypeUpdate()
    content.vb: Public MustOverride Sub UsedTypeUpdate
  overload: RW_ModularizationWeapon.FieldReader`2.UsedTypeUpdate*
  nameWithType.vb: FieldReader(Of T, TV).UsedTypeUpdate()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).UsedTypeUpdate()
- uid: RW_ModularizationWeapon.FieldReader`2.Add(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  commentId: M:RW_ModularizationWeapon.FieldReader`2.Add(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  id: Add(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: Add(KeyValuePair<RuntimeFieldHandle, TV>)
  nameWithType: FieldReader<T, TV>.Add(KeyValuePair<RuntimeFieldHandle, TV>)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Add(System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: Add
    path: FieldReader.cs
    startLine: 82
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public void Add(KeyValuePair<RuntimeFieldHandle, TV> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}
    content.vb: Public Sub Add(item As KeyValuePair(Of RuntimeFieldHandle, TV))
  overload: RW_ModularizationWeapon.FieldReader`2.Add*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}.Add(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}})
  nameWithType.vb: FieldReader(Of T, TV).Add(KeyValuePair(Of RuntimeFieldHandle, TV))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Add(System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV))
  name.vb: Add(KeyValuePair(Of RuntimeFieldHandle, TV))
- uid: RW_ModularizationWeapon.FieldReader`2.Contains(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  commentId: M:RW_ModularizationWeapon.FieldReader`2.Contains(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  id: Contains(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: Contains(KeyValuePair<RuntimeFieldHandle, TV>)
  nameWithType: FieldReader<T, TV>.Contains(KeyValuePair<RuntimeFieldHandle, TV>)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Contains(System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: Contains
    path: FieldReader.cs
    startLine: 84
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public bool Contains(KeyValuePair<RuntimeFieldHandle, TV> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As KeyValuePair(Of RuntimeFieldHandle, TV)) As Boolean
  overload: RW_ModularizationWeapon.FieldReader`2.Contains*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}.Contains(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}})
  nameWithType.vb: FieldReader(Of T, TV).Contains(KeyValuePair(Of RuntimeFieldHandle, TV))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Contains(System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV))
  name.vb: Contains(KeyValuePair(Of RuntimeFieldHandle, TV))
- uid: RW_ModularizationWeapon.FieldReader`2.CopyTo(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}[],System.Int32)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.CopyTo(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}[],System.Int32)
  id: CopyTo(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}[],System.Int32)
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: CopyTo(KeyValuePair<RuntimeFieldHandle, TV>[], Int32)
  nameWithType: FieldReader<T, TV>.CopyTo(KeyValuePair<RuntimeFieldHandle, TV>[], Int32)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.CopyTo(System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>[], System.Int32)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: CopyTo
    path: FieldReader.cs
    startLine: 86
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public void CopyTo(KeyValuePair<RuntimeFieldHandle, TV>[] array, int arrayIndex)
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As KeyValuePair(Of RuntimeFieldHandle, TV)(), arrayIndex As Integer)
  overload: RW_ModularizationWeapon.FieldReader`2.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}.CopyTo(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}[],System.Int32)
  nameWithType.vb: FieldReader(Of T, TV).CopyTo(KeyValuePair(Of RuntimeFieldHandle, TV)(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).CopyTo(System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of RuntimeFieldHandle, TV)(), Int32)
- uid: RW_ModularizationWeapon.FieldReader`2.GetEnumerator
  commentId: M:RW_ModularizationWeapon.FieldReader`2.GetEnumerator
  id: GetEnumerator
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: FieldReader<T, TV>.GetEnumerator()
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: GetEnumerator
    path: FieldReader.cs
    startLine: 95
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public IEnumerator<KeyValuePair<RuntimeFieldHandle, TV>> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of RuntimeFieldHandle, TV))
  overload: RW_ModularizationWeapon.FieldReader`2.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}.GetEnumerator
  nameWithType.vb: FieldReader(Of T, TV).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).GetEnumerator()
- uid: RW_ModularizationWeapon.FieldReader`2.Remove(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  commentId: M:RW_ModularizationWeapon.FieldReader`2.Remove(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  id: Remove(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: Remove(KeyValuePair<RuntimeFieldHandle, TV>)
  nameWithType: FieldReader<T, TV>.Remove(KeyValuePair<RuntimeFieldHandle, TV>)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Remove(System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: Remove
    path: FieldReader.cs
    startLine: 100
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public bool Remove(KeyValuePair<RuntimeFieldHandle, TV> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}
    return:
      type: System.Boolean
    content.vb: Public Function Remove(item As KeyValuePair(Of RuntimeFieldHandle, TV)) As Boolean
  overload: RW_ModularizationWeapon.FieldReader`2.Remove*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}.Remove(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}})
  nameWithType.vb: FieldReader(Of T, TV).Remove(KeyValuePair(Of RuntimeFieldHandle, TV))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Remove(System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV))
  name.vb: Remove(KeyValuePair(Of RuntimeFieldHandle, TV))
- uid: RW_ModularizationWeapon.FieldReader`2.System#Collections#IEnumerable#GetEnumerator
  commentId: M:RW_ModularizationWeapon.FieldReader`2.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: FieldReader<T, TV>.IEnumerable.GetEnumerator()
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: FieldReader.cs
    startLine: 106
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: RW_ModularizationWeapon.FieldReader`2.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: FieldReader(Of T, TV).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`1)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`1)
  id: CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`1)
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: CalcValue(Func<TV, TV, FieldInfo, TV>, TV)
  nameWithType: FieldReader<T, TV>.CalcValue(Func<TV, TV, FieldInfo, TV>, TV)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.CalcValue(System.Func<TV, TV, System.Reflection.FieldInfo, TV>, TV)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: CalcValue
    path: FieldReader.cs
    startLine: 113
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  summary: "\nuniversal calculation, `FieldReader` with single value\n"
  example: []
  syntax:
    content: public FieldReader<T, TV> CalcValue(Func<TV, TV, FieldInfo, TV> calc, TV value)
    parameters:
    - id: calc
      type: System.Func{{TV},{TV},System.Reflection.FieldInfo,{TV}}
      description: calculation function
    - id: value
      type: '{TV}'
      description: single value for calculate
    return:
      type: RW_ModularizationWeapon.FieldReader`2
      description: after calculation `FieldReader`
    content.vb: Public Function CalcValue(calc As Func(Of TV, TV, FieldInfo, TV), value As TV) As FieldReader(Of T, TV)
  overload: RW_ModularizationWeapon.FieldReader`2.CalcValue*
  nameWithType.vb: FieldReader(Of T, TV).CalcValue(Func(Of TV, TV, FieldInfo, TV), TV)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).CalcValue(System.Func(Of TV, TV, System.Reflection.FieldInfo, TV), TV)
  name.vb: CalcValue(Func(Of TV, TV, FieldInfo, TV), TV)
- uid: RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`0)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`0)
  id: CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`0)
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: CalcValue(Func<TV, TV, FieldInfo, TV>, T)
  nameWithType: FieldReader<T, TV>.CalcValue(Func<TV, TV, FieldInfo, TV>, T)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.CalcValue(System.Func<TV, TV, System.Reflection.FieldInfo, TV>, T)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: CalcValue
    path: FieldReader.cs
    startLine: 132
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  summary: "\nuniversal calculation, `FieldReader` with instance\n"
  example: []
  syntax:
    content: public T CalcValue(Func<TV, TV, FieldInfo, TV> calc, T orginal)
    parameters:
    - id: calc
      type: System.Func{{TV},{TV},System.Reflection.FieldInfo,{TV}}
      description: calculation function
    - id: orginal
      type: '{T}'
      description: instance for calculate
    return:
      type: '{T}'
      description: instance after calculation
    content.vb: Public Function CalcValue(calc As Func(Of TV, TV, FieldInfo, TV), orginal As T) As T
  overload: RW_ModularizationWeapon.FieldReader`2.CalcValue*
  nameWithType.vb: FieldReader(Of T, TV).CalcValue(Func(Of TV, TV, FieldInfo, TV), T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).CalcValue(System.Func(Of TV, TV, System.Reflection.FieldInfo, TV), T)
  name.vb: CalcValue(Func(Of TV, TV, FieldInfo, TV), T)
- uid: RW_ModularizationWeapon.FieldReader`2.CalcValue``1(System.Func{`1,`1,System.Reflection.FieldInfo,`1},``0,``0)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.CalcValue``1(System.Func{`1,`1,System.Reflection.FieldInfo,`1},``0,``0)
  id: CalcValue``1(System.Func{`1,`1,System.Reflection.FieldInfo,`1},``0,``0)
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: CalcValue<TFR>(Func<TV, TV, FieldInfo, TV>, TFR, TFR)
  nameWithType: FieldReader<T, TV>.CalcValue<TFR>(Func<TV, TV, FieldInfo, TV>, TFR, TFR)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.CalcValue<TFR>(System.Func<TV, TV, System.Reflection.FieldInfo, TV>, TFR, TFR)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: CalcValue
    path: FieldReader.cs
    startLine: 160
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  summary: "\nuniversal calculation, `FieldReader` with `FieldReader`\n"
  example: []
  syntax:
    content: >-
      public static TFR CalcValue<TFR>(Func<TV, TV, FieldInfo, TV> calc, TFR a, TFR b)
          where TFR : FieldReader<T, TV>, new()
    parameters:
    - id: calc
      type: System.Func{{TV},{TV},System.Reflection.FieldInfo,{TV}}
      description: calculation function
    - id: a
      type: '{TFR}'
      description: '`FieldReader` value a'
    - id: b
      type: '{TFR}'
      description: '`FieldReader` value b'
    typeParameters:
    - id: TFR
      description: result type
    return:
      type: '{TFR}'
      description: after calculate `FieldReader`
    content.vb: Public Shared Function CalcValue(Of TFR As {FieldReader(Of T, TV), New})(calc As Func(Of TV, TV, FieldInfo, TV), a As TFR, b As TFR) As TFR
  overload: RW_ModularizationWeapon.FieldReader`2.CalcValue*
  nameWithType.vb: FieldReader(Of T, TV).CalcValue(Of TFR)(Func(Of TV, TV, FieldInfo, TV), TFR, TFR)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).CalcValue(Of TFR)(System.Func(Of TV, TV, System.Reflection.FieldInfo, TV), TFR, TFR)
  name.vb: CalcValue(Of TFR)(Func(Of TV, TV, FieldInfo, TV), TFR, TFR)
- uid: RW_ModularizationWeapon.FieldReader`2.LoadDataFromXmlCustom(System.Xml.XmlNode)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.LoadDataFromXmlCustom(System.Xml.XmlNode)
  id: LoadDataFromXmlCustom(System.Xml.XmlNode)
  parent: RW_ModularizationWeapon.FieldReader`2
  langs:
  - csharp
  - vb
  name: LoadDataFromXmlCustom(XmlNode)
  nameWithType: FieldReader<T, TV>.LoadDataFromXmlCustom(XmlNode)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.LoadDataFromXmlCustom(System.Xml.XmlNode)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: LoadDataFromXmlCustom
    path: FieldReader.cs
    startLine: 196
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public virtual void LoadDataFromXmlCustom(XmlNode xmlRoot)
    parameters:
    - id: xmlRoot
      type: System.Xml.XmlNode
    content.vb: Public Overridable Sub LoadDataFromXmlCustom(xmlRoot As XmlNode)
  overload: RW_ModularizationWeapon.FieldReader`2.LoadDataFromXmlCustom*
  nameWithType.vb: FieldReader(Of T, TV).LoadDataFromXmlCustom(XmlNode)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).LoadDataFromXmlCustom(System.Xml.XmlNode)
references:
- uid: RW_ModularizationWeapon
  commentId: N:RW_ModularizationWeapon
  name: RW_ModularizationWeapon
  nameWithType: RW_ModularizationWeapon
  fullName: RW_ModularizationWeapon
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}
  commentId: T:System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<RuntimeFieldHandle, TV>
  nameWithType: IDictionary<RuntimeFieldHandle, TV>
  fullName: System.Collections.Generic.IDictionary<System.RuntimeFieldHandle, TV>
  nameWithType.vb: IDictionary(Of RuntimeFieldHandle, TV)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.RuntimeFieldHandle, TV)
  name.vb: IDictionary(Of RuntimeFieldHandle, TV)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<RuntimeFieldHandle, TV>>
  nameWithType: ICollection<KeyValuePair<RuntimeFieldHandle, TV>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of RuntimeFieldHandle, TV))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV))
  name.vb: ICollection(Of KeyValuePair(Of RuntimeFieldHandle, TV))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<RuntimeFieldHandle, TV>>
  nameWithType: IEnumerable<KeyValuePair<RuntimeFieldHandle, TV>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of RuntimeFieldHandle, TV))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV))
  name.vb: IEnumerable(Of KeyValuePair(Of RuntimeFieldHandle, TV))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
  commentId: M:RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
  parent: RW_ModularizationWeapon.Tools.ToolsFunction
  definition: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
  name: LogAllField()
  nameWithType: ToolsFunction.LogAllField()
  fullName: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField()
  spec.csharp:
  - uid: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
    name: LogAllField
    nameWithType: ToolsFunction.LogAllField
    fullName: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
    name: LogAllField
    nameWithType: ToolsFunction.LogAllField
    fullName: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
  commentId: M:RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
  isExternal: true
  name: LogAllField(Object)
  nameWithType: ToolsFunction.LogAllField(Object)
  fullName: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
  spec.csharp:
  - uid: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
    name: LogAllField
    nameWithType: ToolsFunction.LogAllField
    fullName: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
    name: LogAllField
    nameWithType: ToolsFunction.LogAllField
    fullName: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.Tools.ToolsFunction
  commentId: T:RW_ModularizationWeapon.Tools.ToolsFunction
  parent: RW_ModularizationWeapon.Tools
  name: ToolsFunction
  nameWithType: ToolsFunction
  fullName: RW_ModularizationWeapon.Tools.ToolsFunction
- uid: RW_ModularizationWeapon.Tools
  commentId: N:RW_ModularizationWeapon.Tools
  name: RW_ModularizationWeapon.Tools
  nameWithType: RW_ModularizationWeapon.Tools
  fullName: RW_ModularizationWeapon.Tools
- uid: RW_ModularizationWeapon.FieldReader`2.UsedType*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.UsedType
  name: UsedType
  nameWithType: FieldReader<T, TV>.UsedType
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.UsedType
  nameWithType.vb: FieldReader(Of T, TV).UsedType
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).UsedType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: RW_ModularizationWeapon.FieldReader`2.DefaultValue*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.DefaultValue
  name: DefaultValue
  nameWithType: FieldReader<T, TV>.DefaultValue
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.DefaultValue
  nameWithType.vb: FieldReader(Of T, TV).DefaultValue
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).DefaultValue
- uid: '{TV}'
  commentId: '!:TV'
  definition: TV
  name: TV
  nameWithType: TV
  fullName: TV
- uid: TV
  name: TV
  nameWithType: TV
  fullName: TV
- uid: RW_ModularizationWeapon.FieldReader`2.HasDefaultValue*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.HasDefaultValue
  name: HasDefaultValue
  nameWithType: FieldReader<T, TV>.HasDefaultValue
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.HasDefaultValue
  nameWithType.vb: FieldReader(Of T, TV).HasDefaultValue
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).HasDefaultValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: RW_ModularizationWeapon.FieldReader`2.Item*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.Item
  name: Item
  nameWithType: FieldReader<T, TV>.Item
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Item
  nameWithType.vb: FieldReader(Of T, TV).Item
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Item
- uid: System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}.Item(System.RuntimeFieldHandle)
  commentId: P:System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,`1}.Item(System.RuntimeFieldHandle)
  parent: System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}
  definition: System.Collections.Generic.IDictionary`2.Item(`0)
  name: Item[RuntimeFieldHandle]
  nameWithType: IDictionary<RuntimeFieldHandle, TV>.Item[RuntimeFieldHandle]
  fullName: System.Collections.Generic.IDictionary<System.RuntimeFieldHandle, TV>.Item[System.RuntimeFieldHandle]
  nameWithType.vb: IDictionary(Of RuntimeFieldHandle, TV).Item(RuntimeFieldHandle)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.RuntimeFieldHandle, TV).Item(System.RuntimeFieldHandle)
  name.vb: Item(RuntimeFieldHandle)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<RuntimeFieldHandle, TV>.Item
    fullName: System.Collections.Generic.IDictionary<System.RuntimeFieldHandle, TV>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of RuntimeFieldHandle, TV).Item
    fullName: System.Collections.Generic.IDictionary(Of System.RuntimeFieldHandle, TV).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.RuntimeFieldHandle
  commentId: T:System.RuntimeFieldHandle
  parent: System
  isExternal: true
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.Collections.Generic.IDictionary`2.Item(`0)
  commentId: P:System.Collections.Generic.IDictionary`2.Item(`0)
  isExternal: true
  name: Item[TKey]
  nameWithType: IDictionary<TKey, TValue>.Item[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item[TKey]
  nameWithType.vb: IDictionary(Of TKey, TValue).Item(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<TKey, TValue>.Item
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of TKey, TValue).Item
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.Keys*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.Keys
  name: Keys
  nameWithType: FieldReader<T, TV>.Keys
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Keys
  nameWithType.vb: FieldReader(Of T, TV).Keys
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Keys
- uid: System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}.Keys
  commentId: P:System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,`1}.Keys
  parent: System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}
  definition: System.Collections.Generic.IDictionary`2.Keys
  name: Keys
  nameWithType: IDictionary<RuntimeFieldHandle, TV>.Keys
  fullName: System.Collections.Generic.IDictionary<System.RuntimeFieldHandle, TV>.Keys
  nameWithType.vb: IDictionary(Of RuntimeFieldHandle, TV).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of System.RuntimeFieldHandle, TV).Keys
- uid: System.Collections.Generic.ICollection{System.RuntimeFieldHandle}
  commentId: T:System.Collections.Generic.ICollection{System.RuntimeFieldHandle}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<RuntimeFieldHandle>
  nameWithType: ICollection<RuntimeFieldHandle>
  fullName: System.Collections.Generic.ICollection<System.RuntimeFieldHandle>
  nameWithType.vb: ICollection(Of RuntimeFieldHandle)
  fullName.vb: System.Collections.Generic.ICollection(Of System.RuntimeFieldHandle)
  name.vb: ICollection(Of RuntimeFieldHandle)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Keys
  commentId: P:System.Collections.Generic.IDictionary`2.Keys
  isExternal: true
  name: Keys
  nameWithType: IDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  nameWithType.vb: IDictionary(Of TKey, TValue).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys
- uid: RW_ModularizationWeapon.FieldReader`2.Values*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.Values
  name: Values
  nameWithType: FieldReader<T, TV>.Values
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Values
  nameWithType.vb: FieldReader(Of T, TV).Values
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Values
- uid: System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}.Values
  commentId: P:System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,`1}.Values
  parent: System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}
  definition: System.Collections.Generic.IDictionary`2.Values
  name: Values
  nameWithType: IDictionary<RuntimeFieldHandle, TV>.Values
  fullName: System.Collections.Generic.IDictionary<System.RuntimeFieldHandle, TV>.Values
  nameWithType.vb: IDictionary(Of RuntimeFieldHandle, TV).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of System.RuntimeFieldHandle, TV).Values
- uid: System.Collections.Generic.ICollection{{TV}}
  commentId: T:System.Collections.Generic.ICollection{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TV>
  nameWithType: ICollection<TV>
  fullName: System.Collections.Generic.ICollection<TV>
  nameWithType.vb: ICollection(Of TV)
  fullName.vb: System.Collections.Generic.ICollection(Of TV)
  name.vb: ICollection(Of TV)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Values
  commentId: P:System.Collections.Generic.IDictionary`2.Values
  isExternal: true
  name: Values
  nameWithType: IDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values
  nameWithType.vb: IDictionary(Of TKey, TValue).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values
- uid: RW_ModularizationWeapon.FieldReader`2.Count*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.Count
  name: Count
  nameWithType: FieldReader<T, TV>.Count
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Count
  nameWithType.vb: FieldReader(Of T, TV).Count
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Count
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}}.Count
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<KeyValuePair<RuntimeFieldHandle, TV>>.Count
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>>.Count
  nameWithType.vb: ICollection(Of KeyValuePair(Of RuntimeFieldHandle, TV)).Count
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: RW_ModularizationWeapon.FieldReader`2.IsReadOnly*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.IsReadOnly
  name: IsReadOnly
  nameWithType: FieldReader<T, TV>.IsReadOnly
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.IsReadOnly
  nameWithType.vb: FieldReader(Of T, TV).IsReadOnly
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<KeyValuePair<RuntimeFieldHandle, TV>>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>>.IsReadOnly
  nameWithType.vb: ICollection(Of KeyValuePair(Of RuntimeFieldHandle, TV)).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: RW_ModularizationWeapon.FieldReader`2.Add*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.Add
  name: Add
  nameWithType: FieldReader<T, TV>.Add
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Add
  nameWithType.vb: FieldReader(Of T, TV).Add
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Add
- uid: System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}.Add(System.RuntimeFieldHandle,{TV})
  commentId: M:System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,`1}.Add(System.RuntimeFieldHandle,`1)
  parent: System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}
  definition: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  name: Add(RuntimeFieldHandle, TV)
  nameWithType: IDictionary<RuntimeFieldHandle, TV>.Add(RuntimeFieldHandle, TV)
  fullName: System.Collections.Generic.IDictionary<System.RuntimeFieldHandle, TV>.Add(System.RuntimeFieldHandle, TV)
  nameWithType.vb: IDictionary(Of RuntimeFieldHandle, TV).Add(RuntimeFieldHandle, TV)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.RuntimeFieldHandle, TV).Add(System.RuntimeFieldHandle, TV)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<RuntimeFieldHandle, TV>.Add
    fullName: System.Collections.Generic.IDictionary<System.RuntimeFieldHandle, TV>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of RuntimeFieldHandle, TV).Add
    fullName: System.Collections.Generic.IDictionary(Of System.RuntimeFieldHandle, TV).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  commentId: M:System.Collections.Generic.IDictionary`2.Add(`0,`1)
  isExternal: true
  name: Add(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<TKey, TValue>.Add
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of TKey, TValue).Add
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.Clear*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.Clear
  name: Clear
  nameWithType: FieldReader<T, TV>.Clear
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Clear
  nameWithType.vb: FieldReader(Of T, TV).Clear
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Clear
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}}.Clear
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<KeyValuePair<RuntimeFieldHandle, TV>>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>>.Clear()
  nameWithType.vb: ICollection(Of KeyValuePair(Of RuntimeFieldHandle, TV)).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<KeyValuePair<RuntimeFieldHandle, TV>>.Clear
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of KeyValuePair(Of RuntimeFieldHandle, TV)).Clear
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.ContainsKey*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.ContainsKey
  name: ContainsKey
  nameWithType: FieldReader<T, TV>.ContainsKey
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.ContainsKey
  nameWithType.vb: FieldReader(Of T, TV).ContainsKey
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).ContainsKey
- uid: System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}.ContainsKey(System.RuntimeFieldHandle)
  commentId: M:System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,`1}.ContainsKey(System.RuntimeFieldHandle)
  parent: System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}
  definition: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  name: ContainsKey(RuntimeFieldHandle)
  nameWithType: IDictionary<RuntimeFieldHandle, TV>.ContainsKey(RuntimeFieldHandle)
  fullName: System.Collections.Generic.IDictionary<System.RuntimeFieldHandle, TV>.ContainsKey(System.RuntimeFieldHandle)
  nameWithType.vb: IDictionary(Of RuntimeFieldHandle, TV).ContainsKey(RuntimeFieldHandle)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.RuntimeFieldHandle, TV).ContainsKey(System.RuntimeFieldHandle)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<RuntimeFieldHandle, TV>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<System.RuntimeFieldHandle, TV>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of RuntimeFieldHandle, TV).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of System.RuntimeFieldHandle, TV).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  isExternal: true
  name: ContainsKey(TKey)
  nameWithType: IDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<TKey, TValue>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of TKey, TValue).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.Remove*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.Remove
  name: Remove
  nameWithType: FieldReader<T, TV>.Remove
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Remove
  nameWithType.vb: FieldReader(Of T, TV).Remove
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Remove
- uid: System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}.Remove(System.RuntimeFieldHandle)
  commentId: M:System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,`1}.Remove(System.RuntimeFieldHandle)
  parent: System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}
  definition: System.Collections.Generic.IDictionary`2.Remove(`0)
  name: Remove(RuntimeFieldHandle)
  nameWithType: IDictionary<RuntimeFieldHandle, TV>.Remove(RuntimeFieldHandle)
  fullName: System.Collections.Generic.IDictionary<System.RuntimeFieldHandle, TV>.Remove(System.RuntimeFieldHandle)
  nameWithType.vb: IDictionary(Of RuntimeFieldHandle, TV).Remove(RuntimeFieldHandle)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.RuntimeFieldHandle, TV).Remove(System.RuntimeFieldHandle)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<RuntimeFieldHandle, TV>.Remove
    fullName: System.Collections.Generic.IDictionary<System.RuntimeFieldHandle, TV>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of RuntimeFieldHandle, TV).Remove
    fullName: System.Collections.Generic.IDictionary(Of System.RuntimeFieldHandle, TV).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Remove(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.Remove(`0)
  isExternal: true
  name: Remove(TKey)
  nameWithType: IDictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<TKey, TValue>.Remove
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of TKey, TValue).Remove
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.TryGetValue*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.TryGetValue
  name: TryGetValue
  nameWithType: FieldReader<T, TV>.TryGetValue
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.TryGetValue
  nameWithType.vb: FieldReader(Of T, TV).TryGetValue
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).TryGetValue
- uid: System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}.TryGetValue(System.RuntimeFieldHandle,{TV}@)
  commentId: M:System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,`1}.TryGetValue(System.RuntimeFieldHandle,`1@)
  parent: System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,{TV}}
  definition: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  name: TryGetValue(RuntimeFieldHandle, TV)
  nameWithType: IDictionary<RuntimeFieldHandle, TV>.TryGetValue(RuntimeFieldHandle, TV)
  fullName: System.Collections.Generic.IDictionary<System.RuntimeFieldHandle, TV>.TryGetValue(System.RuntimeFieldHandle, TV)
  nameWithType.vb: IDictionary(Of RuntimeFieldHandle, TV).TryGetValue(RuntimeFieldHandle, TV)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.RuntimeFieldHandle, TV).TryGetValue(System.RuntimeFieldHandle, TV)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<RuntimeFieldHandle, TV>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<System.RuntimeFieldHandle, TV>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of RuntimeFieldHandle, TV).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of System.RuntimeFieldHandle, TV).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  isExternal: true
  name: TryGetValue(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<TKey, TValue>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of TKey, TValue).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.Clone*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.Clone
  name: Clone
  nameWithType: FieldReader<T, TV>.Clone
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Clone
  nameWithType.vb: FieldReader(Of T, TV).Clone
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Clone
- uid: RW_ModularizationWeapon.FieldReader`2
  commentId: T:RW_ModularizationWeapon.FieldReader`2
  parent: RW_ModularizationWeapon
  name: FieldReader<T, TV>
  nameWithType: FieldReader<T, TV>
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>
  nameWithType.vb: FieldReader(Of T, TV)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV)
  name.vb: FieldReader(Of T, TV)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2
    name: FieldReader
    nameWithType: FieldReader
    fullName: RW_ModularizationWeapon.FieldReader
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2
    name: FieldReader
    nameWithType: FieldReader
    fullName: RW_ModularizationWeapon.FieldReader
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.UsedTypeUpdate*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.UsedTypeUpdate
  name: UsedTypeUpdate
  nameWithType: FieldReader<T, TV>.UsedTypeUpdate
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.UsedTypeUpdate
  nameWithType.vb: FieldReader(Of T, TV).UsedTypeUpdate
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).UsedTypeUpdate
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}.Add(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}}.Add(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(KeyValuePair<RuntimeFieldHandle, TV>)
  nameWithType: ICollection<KeyValuePair<RuntimeFieldHandle, TV>>.Add(KeyValuePair<RuntimeFieldHandle, TV>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>>.Add(System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of RuntimeFieldHandle, TV)).Add(KeyValuePair(Of RuntimeFieldHandle, TV))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)).Add(System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV))
  name.vb: Add(KeyValuePair(Of RuntimeFieldHandle, TV))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<KeyValuePair<RuntimeFieldHandle, TV>>.Add
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of KeyValuePair(Of RuntimeFieldHandle, TV)).Add
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}
  commentId: T:System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<RuntimeFieldHandle, TV>
  nameWithType: KeyValuePair<RuntimeFieldHandle, TV>
  fullName: System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>
  nameWithType.vb: KeyValuePair(Of RuntimeFieldHandle, TV)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)
  name.vb: KeyValuePair(Of RuntimeFieldHandle, TV)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.Contains*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.Contains
  name: Contains
  nameWithType: FieldReader<T, TV>.Contains
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Contains
  nameWithType.vb: FieldReader(Of T, TV).Contains
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Contains
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}.Contains(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}}.Contains(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(KeyValuePair<RuntimeFieldHandle, TV>)
  nameWithType: ICollection<KeyValuePair<RuntimeFieldHandle, TV>>.Contains(KeyValuePair<RuntimeFieldHandle, TV>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>>.Contains(System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of RuntimeFieldHandle, TV)).Contains(KeyValuePair(Of RuntimeFieldHandle, TV))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)).Contains(System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV))
  name.vb: Contains(KeyValuePair(Of RuntimeFieldHandle, TV))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<KeyValuePair<RuntimeFieldHandle, TV>>.Contains
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of KeyValuePair(Of RuntimeFieldHandle, TV)).Contains
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.CopyTo*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.CopyTo
  name: CopyTo
  nameWithType: FieldReader<T, TV>.CopyTo
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.CopyTo
  nameWithType.vb: FieldReader(Of T, TV).CopyTo
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).CopyTo
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}.CopyTo(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}}.CopyTo(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(KeyValuePair<RuntimeFieldHandle, TV>[], Int32)
  nameWithType: ICollection<KeyValuePair<RuntimeFieldHandle, TV>>.CopyTo(KeyValuePair<RuntimeFieldHandle, TV>[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>>.CopyTo(System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>[], System.Int32)
  nameWithType.vb: ICollection(Of KeyValuePair(Of RuntimeFieldHandle, TV)).CopyTo(KeyValuePair(Of RuntimeFieldHandle, TV)(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)).CopyTo(System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of RuntimeFieldHandle, TV)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<KeyValuePair<RuntimeFieldHandle, TV>>.CopyTo
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of KeyValuePair(Of RuntimeFieldHandle, TV)).CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}[]
  isExternal: true
  name: KeyValuePair<RuntimeFieldHandle, TV>[]
  nameWithType: KeyValuePair<RuntimeFieldHandle, TV>[]
  fullName: System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>[]
  nameWithType.vb: KeyValuePair(Of RuntimeFieldHandle, TV)()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)()
  name.vb: KeyValuePair(Of RuntimeFieldHandle, TV)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.GetEnumerator*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.GetEnumerator
  name: GetEnumerator
  nameWithType: FieldReader<T, TV>.GetEnumerator
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.GetEnumerator
  nameWithType.vb: FieldReader(Of T, TV).GetEnumerator
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<RuntimeFieldHandle, TV>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of RuntimeFieldHandle, TV)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<RuntimeFieldHandle, TV>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of RuntimeFieldHandle, TV)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<RuntimeFieldHandle, TV>>
  nameWithType: IEnumerator<KeyValuePair<RuntimeFieldHandle, TV>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of RuntimeFieldHandle, TV))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV))
  name.vb: IEnumerator(Of KeyValuePair(Of RuntimeFieldHandle, TV))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}.Remove(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}}.Remove(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,{TV}}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(KeyValuePair<RuntimeFieldHandle, TV>)
  nameWithType: ICollection<KeyValuePair<RuntimeFieldHandle, TV>>.Remove(KeyValuePair<RuntimeFieldHandle, TV>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>>.Remove(System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of RuntimeFieldHandle, TV)).Remove(KeyValuePair(Of RuntimeFieldHandle, TV))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)).Remove(System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV))
  name.vb: Remove(KeyValuePair(Of RuntimeFieldHandle, TV))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<KeyValuePair<RuntimeFieldHandle, TV>>.Remove
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of KeyValuePair(Of RuntimeFieldHandle, TV)).Remove
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: FieldReader<T, TV>.IEnumerable.GetEnumerator
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: FieldReader(Of T, TV).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: RW_ModularizationWeapon.FieldReader`2.CalcValue*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.CalcValue
  name: CalcValue
  nameWithType: FieldReader<T, TV>.CalcValue
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.CalcValue
  nameWithType.vb: FieldReader(Of T, TV).CalcValue
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).CalcValue
- uid: System.Func{{TV},{TV},System.Reflection.FieldInfo,{TV}}
  commentId: T:System.Func{`1,`1,System.Reflection.FieldInfo,`1}
  parent: System
  definition: System.Func`4
  name: Func<TV, TV, FieldInfo, TV>
  nameWithType: Func<TV, TV, FieldInfo, TV>
  fullName: System.Func<TV, TV, System.Reflection.FieldInfo, TV>
  nameWithType.vb: Func(Of TV, TV, FieldInfo, TV)
  fullName.vb: System.Func(Of TV, TV, System.Reflection.FieldInfo, TV)
  name.vb: Func(Of TV, TV, FieldInfo, TV)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: '{TFR}'
  commentId: '!:TFR'
  definition: TFR
  name: TFR
  nameWithType: TFR
  fullName: TFR
- uid: TFR
  name: TFR
  nameWithType: TFR
  fullName: TFR
- uid: RW_ModularizationWeapon.FieldReader`2.LoadDataFromXmlCustom*
  commentId: Overload:RW_ModularizationWeapon.FieldReader`2.LoadDataFromXmlCustom
  name: LoadDataFromXmlCustom
  nameWithType: FieldReader<T, TV>.LoadDataFromXmlCustom
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.LoadDataFromXmlCustom
  nameWithType.vb: FieldReader(Of T, TV).LoadDataFromXmlCustom
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).LoadDataFromXmlCustom
- uid: System.Xml.XmlNode
  commentId: T:System.Xml.XmlNode
  parent: System.Xml
  isExternal: true
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
