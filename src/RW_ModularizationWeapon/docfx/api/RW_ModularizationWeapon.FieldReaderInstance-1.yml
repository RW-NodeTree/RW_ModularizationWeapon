### YamlMime:ManagedReference
items:
- uid: RW_ModularizationWeapon.FieldReaderInstance`1
  commentId: T:RW_ModularizationWeapon.FieldReaderInstance`1
  id: FieldReaderInstance`1
  parent: RW_ModularizationWeapon
  children:
  - RW_ModularizationWeapon.FieldReaderInstance`1.#ctor
  - RW_ModularizationWeapon.FieldReaderInstance`1.#ctor(RW_ModularizationWeapon.FieldReaderInstance{`0})
  - RW_ModularizationWeapon.FieldReaderInstance`1.Add(System.RuntimeFieldHandle,System.Object)
  - RW_ModularizationWeapon.FieldReaderInstance`1.Clear
  - RW_ModularizationWeapon.FieldReaderInstance`1.Clone
  - RW_ModularizationWeapon.FieldReaderInstance`1.ContainsKey(System.RuntimeFieldHandle)
  - RW_ModularizationWeapon.FieldReaderInstance`1.Count
  - RW_ModularizationWeapon.FieldReaderInstance`1.DefaultValue
  - RW_ModularizationWeapon.FieldReaderInstance`1.HasDefaultValue
  - RW_ModularizationWeapon.FieldReaderInstance`1.Item(System.RuntimeFieldHandle)
  - RW_ModularizationWeapon.FieldReaderInstance`1.Keys
  - RW_ModularizationWeapon.FieldReaderInstance`1.LoadDataFromXmlCustom(System.Xml.XmlNode)
  - RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseAnd(`0,RW_ModularizationWeapon.FieldReaderInstance{`0})
  - RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseAnd(RW_ModularizationWeapon.FieldReaderInstance{`0},RW_ModularizationWeapon.FieldReaderInstance{`0})
  - RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseOr(`0,RW_ModularizationWeapon.FieldReaderInstance{`0})
  - RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseOr(RW_ModularizationWeapon.FieldReaderInstance{`0},RW_ModularizationWeapon.FieldReaderInstance{`0})
  - RW_ModularizationWeapon.FieldReaderInstance`1.Remove(System.RuntimeFieldHandle)
  - RW_ModularizationWeapon.FieldReaderInstance`1.ToString
  - RW_ModularizationWeapon.FieldReaderInstance`1.TryGetValue(System.RuntimeFieldHandle,System.Object@)
  - RW_ModularizationWeapon.FieldReaderInstance`1.UsedTypeUpdate
  - RW_ModularizationWeapon.FieldReaderInstance`1.Values
  langs:
  - csharp
  - vb
  name: FieldReaderInstance<T>
  nameWithType: FieldReaderInstance<T>
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>
  type: Class
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: FieldReaderInstance
    path: FieldReader.cs
    startLine: 611
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  summary: "\ninstance only calculater\n"
  example: []
  syntax:
    content: 'public class FieldReaderInstance<T> : FieldReader<T, object>, IDictionary<RuntimeFieldHandle, object>, ICollection<KeyValuePair<RuntimeFieldHandle, object>>, IEnumerable<KeyValuePair<RuntimeFieldHandle, object>>, IEnumerable'
    typeParameters:
    - id: T
      description: instance base type for calculation
    content.vb: >-
      Public Class FieldReaderInstance(Of T)

          Inherits FieldReader(Of T, Object)

          Implements IDictionary(Of RuntimeFieldHandle, Object), ICollection(Of KeyValuePair(Of RuntimeFieldHandle, Object)), IEnumerable(Of KeyValuePair(Of RuntimeFieldHandle, Object)), IEnumerable
  inheritance:
  - System.Object
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}
  implements:
  - System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,System.Object}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.UsedType
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.DefaultValue
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.HasDefaultValue
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.Item(System.RuntimeFieldHandle)
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.Keys
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.Values
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.Count
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.IsReadOnly
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.Add(System.RuntimeFieldHandle,System.Object)
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.Clear
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.ContainsKey(System.RuntimeFieldHandle)
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.Remove(System.RuntimeFieldHandle)
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.TryGetValue(System.RuntimeFieldHandle,System.Object@)
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.Clone
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.UsedTypeUpdate
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.Add(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object})
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.Contains(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object})
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.CopyTo(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object}[],System.Int32)
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.GetEnumerator
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.Remove(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object})
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.System#Collections#IEnumerable#GetEnumerator
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.CalcValue(System.Func{System.Object,System.Object,System.Reflection.FieldInfo,System.Object},System.Object)
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.CalcValue(System.Func{System.Object,System.Object,System.Reflection.FieldInfo,System.Object},{T})
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.CalcValue``1(System.Func{System.Object,System.Object,System.Reflection.FieldInfo,System.Object},{TFR},{TFR})
  - RW_ModularizationWeapon.FieldReader{{T},System.Object}.LoadDataFromXmlCustom(System.Xml.XmlNode)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - System.Object.RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
  nameWithType.vb: FieldReaderInstance(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T)
  name.vb: FieldReaderInstance(Of T)
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.#ctor
  commentId: M:RW_ModularizationWeapon.FieldReaderInstance`1.#ctor
  id: '#ctor'
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: FieldReaderInstance()
  nameWithType: FieldReaderInstance<T>.FieldReaderInstance()
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.FieldReaderInstance()
  type: Constructor
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: .ctor
    path: FieldReader.cs
    startLine: 617
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public FieldReaderInstance()
    content.vb: Public Sub New
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.#ctor*
  nameWithType.vb: FieldReaderInstance(Of T).FieldReaderInstance()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).FieldReaderInstance()
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.#ctor(RW_ModularizationWeapon.FieldReaderInstance{`0})
  commentId: M:RW_ModularizationWeapon.FieldReaderInstance`1.#ctor(RW_ModularizationWeapon.FieldReaderInstance{`0})
  id: '#ctor(RW_ModularizationWeapon.FieldReaderInstance{`0})'
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: FieldReaderInstance(FieldReaderInstance<T>)
  nameWithType: FieldReaderInstance<T>.FieldReaderInstance(FieldReaderInstance<T>)
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.FieldReaderInstance(RW_ModularizationWeapon.FieldReaderInstance<T>)
  type: Constructor
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: .ctor
    path: FieldReader.cs
    startLine: 619
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public FieldReaderInstance(FieldReaderInstance<T> other)
    parameters:
    - id: other
      type: RW_ModularizationWeapon.FieldReaderInstance`1
    content.vb: Public Sub New(other As FieldReaderInstance(Of T))
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.#ctor*
  nameWithType.vb: FieldReaderInstance(Of T).FieldReaderInstance(FieldReaderInstance(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).FieldReaderInstance(RW_ModularizationWeapon.FieldReaderInstance(Of T))
  name.vb: FieldReaderInstance(FieldReaderInstance(Of T))
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.Count
  commentId: P:RW_ModularizationWeapon.FieldReaderInstance`1.Count
  id: Count
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: FieldReaderInstance<T>.Count
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.Count
  type: Property
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: Count
    path: FieldReader.cs
    startLine: 629
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public override int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overrides ReadOnly Property Count As Integer
  overridden: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Count
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.Count*
  nameWithType.vb: FieldReaderInstance(Of T).Count
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).Count
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.Keys
  commentId: P:RW_ModularizationWeapon.FieldReaderInstance`1.Keys
  id: Keys
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: FieldReaderInstance<T>.Keys
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.Keys
  type: Property
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: Keys
    path: FieldReader.cs
    startLine: 631
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public override ICollection<RuntimeFieldHandle> Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.RuntimeFieldHandle}
    content.vb: Public Overrides ReadOnly Property Keys As ICollection(Of RuntimeFieldHandle)
  overridden: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Keys
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.Keys*
  nameWithType.vb: FieldReaderInstance(Of T).Keys
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).Keys
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.Values
  commentId: P:RW_ModularizationWeapon.FieldReaderInstance`1.Values
  id: Values
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: FieldReaderInstance<T>.Values
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.Values
  type: Property
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: Values
    path: FieldReader.cs
    startLine: 633
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public override ICollection<object> Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Object}
    content.vb: Public Overrides ReadOnly Property Values As ICollection(Of Object)
  overridden: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Values
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.Values*
  nameWithType.vb: FieldReaderInstance(Of T).Values
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).Values
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.DefaultValue
  commentId: P:RW_ModularizationWeapon.FieldReaderInstance`1.DefaultValue
  id: DefaultValue
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: DefaultValue
  nameWithType: FieldReaderInstance<T>.DefaultValue
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.DefaultValue
  type: Property
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: DefaultValue
    path: FieldReader.cs
    startLine: 635
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public override object DefaultValue { get; set; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public Overrides Property DefaultValue As Object
  overridden: RW_ModularizationWeapon.FieldReader{{T},System.Object}.DefaultValue
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.DefaultValue*
  nameWithType.vb: FieldReaderInstance(Of T).DefaultValue
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).DefaultValue
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.HasDefaultValue
  commentId: P:RW_ModularizationWeapon.FieldReaderInstance`1.HasDefaultValue
  id: HasDefaultValue
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: HasDefaultValue
  nameWithType: FieldReaderInstance<T>.HasDefaultValue
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.HasDefaultValue
  type: Property
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: HasDefaultValue
    path: FieldReader.cs
    startLine: 637
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public override bool HasDefaultValue { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property HasDefaultValue As Boolean
  overridden: RW_ModularizationWeapon.FieldReader{{T},System.Object}.HasDefaultValue
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.HasDefaultValue*
  nameWithType.vb: FieldReaderInstance(Of T).HasDefaultValue
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).HasDefaultValue
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.Item(System.RuntimeFieldHandle)
  commentId: P:RW_ModularizationWeapon.FieldReaderInstance`1.Item(System.RuntimeFieldHandle)
  id: Item(System.RuntimeFieldHandle)
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: Item[RuntimeFieldHandle]
  nameWithType: FieldReaderInstance<T>.Item[RuntimeFieldHandle]
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.Item[System.RuntimeFieldHandle]
  type: Property
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: this[]
    path: FieldReader.cs
    startLine: 639
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public override object this[RuntimeFieldHandle key] { get; set; }
    parameters:
    - id: key
      type: System.RuntimeFieldHandle
    return:
      type: System.Object
    content.vb: Public Overrides Property Item(key As RuntimeFieldHandle) As Object
  overridden: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Item(System.RuntimeFieldHandle)
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.Item*
  nameWithType.vb: FieldReaderInstance(Of T).Item(RuntimeFieldHandle)
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).Item(System.RuntimeFieldHandle)
  name.vb: Item(RuntimeFieldHandle)
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.LoadDataFromXmlCustom(System.Xml.XmlNode)
  commentId: M:RW_ModularizationWeapon.FieldReaderInstance`1.LoadDataFromXmlCustom(System.Xml.XmlNode)
  id: LoadDataFromXmlCustom(System.Xml.XmlNode)
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: LoadDataFromXmlCustom(XmlNode)
  nameWithType: FieldReaderInstance<T>.LoadDataFromXmlCustom(XmlNode)
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.LoadDataFromXmlCustom(System.Xml.XmlNode)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: LoadDataFromXmlCustom
    path: FieldReader.cs
    startLine: 646
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public override void LoadDataFromXmlCustom(XmlNode xmlRoot)
    parameters:
    - id: xmlRoot
      type: System.Xml.XmlNode
    content.vb: Public Overrides Sub LoadDataFromXmlCustom(xmlRoot As XmlNode)
  overridden: RW_ModularizationWeapon.FieldReader{{T},System.Object}.LoadDataFromXmlCustom(System.Xml.XmlNode)
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.LoadDataFromXmlCustom*
  nameWithType.vb: FieldReaderInstance(Of T).LoadDataFromXmlCustom(XmlNode)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).LoadDataFromXmlCustom(System.Xml.XmlNode)
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.ToString
  commentId: M:RW_ModularizationWeapon.FieldReaderInstance`1.ToString
  id: ToString
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: FieldReaderInstance<T>.ToString()
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.ToString()
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: ToString
    path: FieldReader.cs
    startLine: 677
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.ToString*
  nameWithType.vb: FieldReaderInstance(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).ToString()
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.ContainsKey(System.RuntimeFieldHandle)
  commentId: M:RW_ModularizationWeapon.FieldReaderInstance`1.ContainsKey(System.RuntimeFieldHandle)
  id: ContainsKey(System.RuntimeFieldHandle)
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: ContainsKey(RuntimeFieldHandle)
  nameWithType: FieldReaderInstance<T>.ContainsKey(RuntimeFieldHandle)
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.ContainsKey(System.RuntimeFieldHandle)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: ContainsKey
    path: FieldReader.cs
    startLine: 688
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public override bool ContainsKey(RuntimeFieldHandle key)
    parameters:
    - id: key
      type: System.RuntimeFieldHandle
    return:
      type: System.Boolean
    content.vb: Public Overrides Function ContainsKey(key As RuntimeFieldHandle) As Boolean
  overridden: RW_ModularizationWeapon.FieldReader{{T},System.Object}.ContainsKey(System.RuntimeFieldHandle)
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.ContainsKey*
  nameWithType.vb: FieldReaderInstance(Of T).ContainsKey(RuntimeFieldHandle)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).ContainsKey(System.RuntimeFieldHandle)
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.Add(System.RuntimeFieldHandle,System.Object)
  commentId: M:RW_ModularizationWeapon.FieldReaderInstance`1.Add(System.RuntimeFieldHandle,System.Object)
  id: Add(System.RuntimeFieldHandle,System.Object)
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: Add(RuntimeFieldHandle, Object)
  nameWithType: FieldReaderInstance<T>.Add(RuntimeFieldHandle, Object)
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.Add(System.RuntimeFieldHandle, System.Object)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: Add
    path: FieldReader.cs
    startLine: 690
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public override void Add(RuntimeFieldHandle key, object value)
    parameters:
    - id: key
      type: System.RuntimeFieldHandle
    - id: value
      type: System.Object
    content.vb: Public Overrides Sub Add(key As RuntimeFieldHandle, value As Object)
  overridden: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Add(System.RuntimeFieldHandle,System.Object)
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.Add*
  nameWithType.vb: FieldReaderInstance(Of T).Add(RuntimeFieldHandle, Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).Add(System.RuntimeFieldHandle, System.Object)
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.Remove(System.RuntimeFieldHandle)
  commentId: M:RW_ModularizationWeapon.FieldReaderInstance`1.Remove(System.RuntimeFieldHandle)
  id: Remove(System.RuntimeFieldHandle)
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: Remove(RuntimeFieldHandle)
  nameWithType: FieldReaderInstance<T>.Remove(RuntimeFieldHandle)
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.Remove(System.RuntimeFieldHandle)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: Remove
    path: FieldReader.cs
    startLine: 703
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public override bool Remove(RuntimeFieldHandle key)
    parameters:
    - id: key
      type: System.RuntimeFieldHandle
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Remove(key As RuntimeFieldHandle) As Boolean
  overridden: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Remove(System.RuntimeFieldHandle)
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.Remove*
  nameWithType.vb: FieldReaderInstance(Of T).Remove(RuntimeFieldHandle)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).Remove(System.RuntimeFieldHandle)
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.TryGetValue(System.RuntimeFieldHandle,System.Object@)
  commentId: M:RW_ModularizationWeapon.FieldReaderInstance`1.TryGetValue(System.RuntimeFieldHandle,System.Object@)
  id: TryGetValue(System.RuntimeFieldHandle,System.Object@)
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: TryGetValue(RuntimeFieldHandle, out Object)
  nameWithType: FieldReaderInstance<T>.TryGetValue(RuntimeFieldHandle, out Object)
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.TryGetValue(System.RuntimeFieldHandle, out System.Object)
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: TryGetValue
    path: FieldReader.cs
    startLine: 705
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public override bool TryGetValue(RuntimeFieldHandle key, out object value)
    parameters:
    - id: key
      type: System.RuntimeFieldHandle
    - id: value
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function TryGetValue(key As RuntimeFieldHandle, ByRef value As Object) As Boolean
  overridden: RW_ModularizationWeapon.FieldReader{{T},System.Object}.TryGetValue(System.RuntimeFieldHandle,System.Object@)
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.TryGetValue*
  nameWithType.vb: FieldReaderInstance(Of T).TryGetValue(RuntimeFieldHandle, ByRef Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).TryGetValue(System.RuntimeFieldHandle, ByRef System.Object)
  name.vb: TryGetValue(RuntimeFieldHandle, ByRef Object)
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.Clear
  commentId: M:RW_ModularizationWeapon.FieldReaderInstance`1.Clear
  id: Clear
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: FieldReaderInstance<T>.Clear()
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.Clear()
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: Clear
    path: FieldReader.cs
    startLine: 717
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public override void Clear()
    content.vb: Public Overrides Sub Clear
  overridden: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Clear
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.Clear*
  nameWithType.vb: FieldReaderInstance(Of T).Clear()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).Clear()
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.Clone
  commentId: M:RW_ModularizationWeapon.FieldReaderInstance`1.Clone
  id: Clone
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: FieldReaderInstance<T>.Clone()
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.Clone()
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: Clone
    path: FieldReader.cs
    startLine: 719
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public override FieldReader<T, object> Clone()
    return:
      type: RW_ModularizationWeapon.FieldReader{{T},System.Object}
    content.vb: Public Overrides Function Clone As FieldReader(Of T, Object)
  overridden: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Clone
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.Clone*
  nameWithType.vb: FieldReaderInstance(Of T).Clone()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).Clone()
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.UsedTypeUpdate
  commentId: M:RW_ModularizationWeapon.FieldReaderInstance`1.UsedTypeUpdate
  id: UsedTypeUpdate
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: UsedTypeUpdate()
  nameWithType: FieldReaderInstance<T>.UsedTypeUpdate()
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.UsedTypeUpdate()
  type: Method
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: UsedTypeUpdate
    path: FieldReader.cs
    startLine: 721
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public override void UsedTypeUpdate()
    content.vb: Public Overrides Sub UsedTypeUpdate
  overridden: RW_ModularizationWeapon.FieldReader{{T},System.Object}.UsedTypeUpdate
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.UsedTypeUpdate*
  nameWithType.vb: FieldReaderInstance(Of T).UsedTypeUpdate()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).UsedTypeUpdate()
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseAnd(`0,RW_ModularizationWeapon.FieldReaderInstance{`0})
  commentId: M:RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseAnd(`0,RW_ModularizationWeapon.FieldReaderInstance{`0})
  id: op_BitwiseAnd(`0,RW_ModularizationWeapon.FieldReaderInstance{`0})
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: BitwiseAnd(T, FieldReaderInstance<T>)
  nameWithType: FieldReaderInstance<T>.BitwiseAnd(T, FieldReaderInstance<T>)
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.BitwiseAnd(T, RW_ModularizationWeapon.FieldReaderInstance<T>)
  type: Operator
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: op_BitwiseAnd
    path: FieldReader.cs
    startLine: 735
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public static T operator &(T a, FieldReaderInstance<T> b)
    parameters:
    - id: a
      type: '{T}'
    - id: b
      type: RW_ModularizationWeapon.FieldReaderInstance`1
    return:
      type: '{T}'
    content.vb: Public Shared Operator And(a As T, b As FieldReaderInstance(Of T)) As T
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseAnd*
  nameWithType.vb: FieldReaderInstance(Of T).BitwiseAnd(T, FieldReaderInstance(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).BitwiseAnd(T, RW_ModularizationWeapon.FieldReaderInstance(Of T))
  name.vb: BitwiseAnd(T, FieldReaderInstance(Of T))
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseOr(`0,RW_ModularizationWeapon.FieldReaderInstance{`0})
  commentId: M:RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseOr(`0,RW_ModularizationWeapon.FieldReaderInstance{`0})
  id: op_BitwiseOr(`0,RW_ModularizationWeapon.FieldReaderInstance{`0})
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: BitwiseOr(T, FieldReaderInstance<T>)
  nameWithType: FieldReaderInstance<T>.BitwiseOr(T, FieldReaderInstance<T>)
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.BitwiseOr(T, RW_ModularizationWeapon.FieldReaderInstance<T>)
  type: Operator
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: op_BitwiseOr
    path: FieldReader.cs
    startLine: 744
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public static T operator |(T a, FieldReaderInstance<T> b)
    parameters:
    - id: a
      type: '{T}'
    - id: b
      type: RW_ModularizationWeapon.FieldReaderInstance`1
    return:
      type: '{T}'
    content.vb: Public Shared Operator Or(a As T, b As FieldReaderInstance(Of T)) As T
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseOr*
  nameWithType.vb: FieldReaderInstance(Of T).BitwiseOr(T, FieldReaderInstance(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).BitwiseOr(T, RW_ModularizationWeapon.FieldReaderInstance(Of T))
  name.vb: BitwiseOr(T, FieldReaderInstance(Of T))
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseAnd(RW_ModularizationWeapon.FieldReaderInstance{`0},RW_ModularizationWeapon.FieldReaderInstance{`0})
  commentId: M:RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseAnd(RW_ModularizationWeapon.FieldReaderInstance{`0},RW_ModularizationWeapon.FieldReaderInstance{`0})
  id: op_BitwiseAnd(RW_ModularizationWeapon.FieldReaderInstance{`0},RW_ModularizationWeapon.FieldReaderInstance{`0})
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: BitwiseAnd(FieldReaderInstance<T>, FieldReaderInstance<T>)
  nameWithType: FieldReaderInstance<T>.BitwiseAnd(FieldReaderInstance<T>, FieldReaderInstance<T>)
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.BitwiseAnd(RW_ModularizationWeapon.FieldReaderInstance<T>, RW_ModularizationWeapon.FieldReaderInstance<T>)
  type: Operator
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: op_BitwiseAnd
    path: FieldReader.cs
    startLine: 753
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public static FieldReaderInstance<T> operator &(FieldReaderInstance<T> a, FieldReaderInstance<T> b)
    parameters:
    - id: a
      type: RW_ModularizationWeapon.FieldReaderInstance`1
    - id: b
      type: RW_ModularizationWeapon.FieldReaderInstance`1
    return:
      type: RW_ModularizationWeapon.FieldReaderInstance`1
    content.vb: Public Shared Operator And(a As FieldReaderInstance(Of T), b As FieldReaderInstance(Of T)) As FieldReaderInstance(Of T)
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseAnd*
  nameWithType.vb: FieldReaderInstance(Of T).BitwiseAnd(FieldReaderInstance(Of T), FieldReaderInstance(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).BitwiseAnd(RW_ModularizationWeapon.FieldReaderInstance(Of T), RW_ModularizationWeapon.FieldReaderInstance(Of T))
  name.vb: BitwiseAnd(FieldReaderInstance(Of T), FieldReaderInstance(Of T))
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseOr(RW_ModularizationWeapon.FieldReaderInstance{`0},RW_ModularizationWeapon.FieldReaderInstance{`0})
  commentId: M:RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseOr(RW_ModularizationWeapon.FieldReaderInstance{`0},RW_ModularizationWeapon.FieldReaderInstance{`0})
  id: op_BitwiseOr(RW_ModularizationWeapon.FieldReaderInstance{`0},RW_ModularizationWeapon.FieldReaderInstance{`0})
  parent: RW_ModularizationWeapon.FieldReaderInstance`1
  langs:
  - csharp
  - vb
  name: BitwiseOr(FieldReaderInstance<T>, FieldReaderInstance<T>)
  nameWithType: FieldReaderInstance<T>.BitwiseOr(FieldReaderInstance<T>, FieldReaderInstance<T>)
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.BitwiseOr(RW_ModularizationWeapon.FieldReaderInstance<T>, RW_ModularizationWeapon.FieldReaderInstance<T>)
  type: Operator
  source:
    remote:
      path: src/RW_ModularizationWeapon/FieldReader.cs
      branch: master
      repo: https://github.com/RW-NodeTree/RW_ModularizationWeapon.git
    id: op_BitwiseOr
    path: FieldReader.cs
    startLine: 756
  assemblies:
  - RW_ModularizationWeapon
  namespace: RW_ModularizationWeapon
  syntax:
    content: public static FieldReaderInstance<T> operator |(FieldReaderInstance<T> a, FieldReaderInstance<T> b)
    parameters:
    - id: a
      type: RW_ModularizationWeapon.FieldReaderInstance`1
    - id: b
      type: RW_ModularizationWeapon.FieldReaderInstance`1
    return:
      type: RW_ModularizationWeapon.FieldReaderInstance`1
    content.vb: Public Shared Operator Or(a As FieldReaderInstance(Of T), b As FieldReaderInstance(Of T)) As FieldReaderInstance(Of T)
  overload: RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseOr*
  nameWithType.vb: FieldReaderInstance(Of T).BitwiseOr(FieldReaderInstance(Of T), FieldReaderInstance(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).BitwiseOr(RW_ModularizationWeapon.FieldReaderInstance(Of T), RW_ModularizationWeapon.FieldReaderInstance(Of T))
  name.vb: BitwiseOr(FieldReaderInstance(Of T), FieldReaderInstance(Of T))
references:
- uid: RW_ModularizationWeapon
  commentId: N:RW_ModularizationWeapon
  name: RW_ModularizationWeapon
  nameWithType: RW_ModularizationWeapon
  fullName: RW_ModularizationWeapon
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  commentId: T:RW_ModularizationWeapon.FieldReader{`0,System.Object}
  parent: RW_ModularizationWeapon
  definition: RW_ModularizationWeapon.FieldReader`2
  name: FieldReader<T, Object>
  nameWithType: FieldReader<T, Object>
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>
  nameWithType.vb: FieldReader(Of T, Object)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object)
  name.vb: FieldReader(Of T, Object)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2
    name: FieldReader
    nameWithType: FieldReader
    fullName: RW_ModularizationWeapon.FieldReader
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2
    name: FieldReader
    nameWithType: FieldReader
    fullName: RW_ModularizationWeapon.FieldReader
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.RuntimeFieldHandle,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<RuntimeFieldHandle, Object>
  nameWithType: IDictionary<RuntimeFieldHandle, Object>
  fullName: System.Collections.Generic.IDictionary<System.RuntimeFieldHandle, System.Object>
  nameWithType.vb: IDictionary(Of RuntimeFieldHandle, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.RuntimeFieldHandle, System.Object)
  name.vb: IDictionary(Of RuntimeFieldHandle, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<RuntimeFieldHandle, Object>>
  nameWithType: ICollection<KeyValuePair<RuntimeFieldHandle, Object>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, System.Object>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of RuntimeFieldHandle, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, System.Object))
  name.vb: ICollection(Of KeyValuePair(Of RuntimeFieldHandle, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<RuntimeFieldHandle, Object>>
  nameWithType: IEnumerable<KeyValuePair<RuntimeFieldHandle, Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, System.Object>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of RuntimeFieldHandle, Object))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, System.Object))
  name.vb: IEnumerable(Of KeyValuePair(Of RuntimeFieldHandle, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.UsedType
  commentId: P:RW_ModularizationWeapon.FieldReader{`0,System.Object}.UsedType
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.UsedType
  name: UsedType
  nameWithType: FieldReader<T, Object>.UsedType
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.UsedType
  nameWithType.vb: FieldReader(Of T, Object).UsedType
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).UsedType
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.DefaultValue
  commentId: P:RW_ModularizationWeapon.FieldReader{`0,System.Object}.DefaultValue
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.DefaultValue
  name: DefaultValue
  nameWithType: FieldReader<T, Object>.DefaultValue
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.DefaultValue
  nameWithType.vb: FieldReader(Of T, Object).DefaultValue
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).DefaultValue
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.HasDefaultValue
  commentId: P:RW_ModularizationWeapon.FieldReader{`0,System.Object}.HasDefaultValue
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.HasDefaultValue
  name: HasDefaultValue
  nameWithType: FieldReader<T, Object>.HasDefaultValue
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.HasDefaultValue
  nameWithType.vb: FieldReader(Of T, Object).HasDefaultValue
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).HasDefaultValue
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Item(System.RuntimeFieldHandle)
  commentId: P:RW_ModularizationWeapon.FieldReader{`0,System.Object}.Item(System.RuntimeFieldHandle)
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.Item(System.RuntimeFieldHandle)
  name: Item[RuntimeFieldHandle]
  nameWithType: FieldReader<T, Object>.Item[RuntimeFieldHandle]
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Item[System.RuntimeFieldHandle]
  nameWithType.vb: FieldReader(Of T, Object).Item(RuntimeFieldHandle)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Item(System.RuntimeFieldHandle)
  name.vb: Item(RuntimeFieldHandle)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.Item(System.RuntimeFieldHandle)
    name: Item
    nameWithType: FieldReader<T, Object>.Item
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.Item(System.RuntimeFieldHandle)
    name: Item
    nameWithType: FieldReader(Of T, Object).Item
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Keys
  commentId: P:RW_ModularizationWeapon.FieldReader{`0,System.Object}.Keys
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.Keys
  name: Keys
  nameWithType: FieldReader<T, Object>.Keys
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Keys
  nameWithType.vb: FieldReader(Of T, Object).Keys
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Keys
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Values
  commentId: P:RW_ModularizationWeapon.FieldReader{`0,System.Object}.Values
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.Values
  name: Values
  nameWithType: FieldReader<T, Object>.Values
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Values
  nameWithType.vb: FieldReader(Of T, Object).Values
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Values
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Count
  commentId: P:RW_ModularizationWeapon.FieldReader{`0,System.Object}.Count
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.Count
  name: Count
  nameWithType: FieldReader<T, Object>.Count
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Count
  nameWithType.vb: FieldReader(Of T, Object).Count
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Count
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.IsReadOnly
  commentId: P:RW_ModularizationWeapon.FieldReader{`0,System.Object}.IsReadOnly
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.IsReadOnly
  name: IsReadOnly
  nameWithType: FieldReader<T, Object>.IsReadOnly
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.IsReadOnly
  nameWithType.vb: FieldReader(Of T, Object).IsReadOnly
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).IsReadOnly
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Add(System.RuntimeFieldHandle,System.Object)
  commentId: M:RW_ModularizationWeapon.FieldReader{`0,System.Object}.Add(System.RuntimeFieldHandle,System.Object)
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.Add(System.RuntimeFieldHandle,`1)
  name: Add(RuntimeFieldHandle, Object)
  nameWithType: FieldReader<T, Object>.Add(RuntimeFieldHandle, Object)
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Add(System.RuntimeFieldHandle, System.Object)
  nameWithType.vb: FieldReader(Of T, Object).Add(RuntimeFieldHandle, Object)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Add(System.RuntimeFieldHandle, System.Object)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.Add(System.RuntimeFieldHandle,`1)
    name: Add
    nameWithType: FieldReader<T, Object>.Add
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.Add(System.RuntimeFieldHandle,`1)
    name: Add
    nameWithType: FieldReader(Of T, Object).Add
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Clear
  commentId: M:RW_ModularizationWeapon.FieldReader{`0,System.Object}.Clear
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.Clear
  name: Clear()
  nameWithType: FieldReader<T, Object>.Clear()
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Clear()
  nameWithType.vb: FieldReader(Of T, Object).Clear()
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Clear()
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.Clear
    name: Clear
    nameWithType: FieldReader<T, Object>.Clear
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.Clear
    name: Clear
    nameWithType: FieldReader(Of T, Object).Clear
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.ContainsKey(System.RuntimeFieldHandle)
  commentId: M:RW_ModularizationWeapon.FieldReader{`0,System.Object}.ContainsKey(System.RuntimeFieldHandle)
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.ContainsKey(System.RuntimeFieldHandle)
  name: ContainsKey(RuntimeFieldHandle)
  nameWithType: FieldReader<T, Object>.ContainsKey(RuntimeFieldHandle)
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.ContainsKey(System.RuntimeFieldHandle)
  nameWithType.vb: FieldReader(Of T, Object).ContainsKey(RuntimeFieldHandle)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).ContainsKey(System.RuntimeFieldHandle)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.ContainsKey(System.RuntimeFieldHandle)
    name: ContainsKey
    nameWithType: FieldReader<T, Object>.ContainsKey
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.ContainsKey(System.RuntimeFieldHandle)
    name: ContainsKey
    nameWithType: FieldReader(Of T, Object).ContainsKey
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Remove(System.RuntimeFieldHandle)
  commentId: M:RW_ModularizationWeapon.FieldReader{`0,System.Object}.Remove(System.RuntimeFieldHandle)
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.Remove(System.RuntimeFieldHandle)
  name: Remove(RuntimeFieldHandle)
  nameWithType: FieldReader<T, Object>.Remove(RuntimeFieldHandle)
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Remove(System.RuntimeFieldHandle)
  nameWithType.vb: FieldReader(Of T, Object).Remove(RuntimeFieldHandle)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Remove(System.RuntimeFieldHandle)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.Remove(System.RuntimeFieldHandle)
    name: Remove
    nameWithType: FieldReader<T, Object>.Remove
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.Remove(System.RuntimeFieldHandle)
    name: Remove
    nameWithType: FieldReader(Of T, Object).Remove
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.TryGetValue(System.RuntimeFieldHandle,System.Object@)
  commentId: M:RW_ModularizationWeapon.FieldReader{`0,System.Object}.TryGetValue(System.RuntimeFieldHandle,System.Object@)
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.TryGetValue(System.RuntimeFieldHandle,`1@)
  name: TryGetValue(RuntimeFieldHandle, Object)
  nameWithType: FieldReader<T, Object>.TryGetValue(RuntimeFieldHandle, Object)
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.TryGetValue(System.RuntimeFieldHandle, System.Object)
  nameWithType.vb: FieldReader(Of T, Object).TryGetValue(RuntimeFieldHandle, Object)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).TryGetValue(System.RuntimeFieldHandle, System.Object)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.TryGetValue(System.RuntimeFieldHandle,`1@)
    name: TryGetValue
    nameWithType: FieldReader<T, Object>.TryGetValue
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.TryGetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.TryGetValue(System.RuntimeFieldHandle,`1@)
    name: TryGetValue
    nameWithType: FieldReader(Of T, Object).TryGetValue
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).TryGetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Clone
  commentId: M:RW_ModularizationWeapon.FieldReader{`0,System.Object}.Clone
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.Clone
  name: Clone()
  nameWithType: FieldReader<T, Object>.Clone()
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Clone()
  nameWithType.vb: FieldReader(Of T, Object).Clone()
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Clone()
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.Clone
    name: Clone
    nameWithType: FieldReader<T, Object>.Clone
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.Clone
    name: Clone
    nameWithType: FieldReader(Of T, Object).Clone
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.UsedTypeUpdate
  commentId: M:RW_ModularizationWeapon.FieldReader{`0,System.Object}.UsedTypeUpdate
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.UsedTypeUpdate
  name: UsedTypeUpdate()
  nameWithType: FieldReader<T, Object>.UsedTypeUpdate()
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.UsedTypeUpdate()
  nameWithType.vb: FieldReader(Of T, Object).UsedTypeUpdate()
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).UsedTypeUpdate()
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.UsedTypeUpdate
    name: UsedTypeUpdate
    nameWithType: FieldReader<T, Object>.UsedTypeUpdate
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.UsedTypeUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.UsedTypeUpdate
    name: UsedTypeUpdate
    nameWithType: FieldReader(Of T, Object).UsedTypeUpdate
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).UsedTypeUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Add(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object})
  commentId: M:RW_ModularizationWeapon.FieldReader{`0,System.Object}.Add(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object})
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.Add(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  name: Add(KeyValuePair<RuntimeFieldHandle, Object>)
  nameWithType: FieldReader<T, Object>.Add(KeyValuePair<RuntimeFieldHandle, Object>)
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Add(System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, System.Object>)
  nameWithType.vb: FieldReader(Of T, Object).Add(KeyValuePair(Of RuntimeFieldHandle, Object))
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Add(System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, System.Object))
  name.vb: Add(KeyValuePair(Of RuntimeFieldHandle, Object))
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.Add(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
    name: Add
    nameWithType: FieldReader<T, Object>.Add
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.Add(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
    name: Add
    nameWithType: FieldReader(Of T, Object).Add
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Contains(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object})
  commentId: M:RW_ModularizationWeapon.FieldReader{`0,System.Object}.Contains(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object})
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.Contains(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  name: Contains(KeyValuePair<RuntimeFieldHandle, Object>)
  nameWithType: FieldReader<T, Object>.Contains(KeyValuePair<RuntimeFieldHandle, Object>)
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Contains(System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, System.Object>)
  nameWithType.vb: FieldReader(Of T, Object).Contains(KeyValuePair(Of RuntimeFieldHandle, Object))
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Contains(System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, System.Object))
  name.vb: Contains(KeyValuePair(Of RuntimeFieldHandle, Object))
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.Contains(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
    name: Contains
    nameWithType: FieldReader<T, Object>.Contains
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.Contains(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
    name: Contains
    nameWithType: FieldReader(Of T, Object).Contains
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.CopyTo(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object}[],System.Int32)
  commentId: M:RW_ModularizationWeapon.FieldReader{`0,System.Object}.CopyTo(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object}[],System.Int32)
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.CopyTo(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}[],System.Int32)
  name: CopyTo(KeyValuePair<RuntimeFieldHandle, Object>[], Int32)
  nameWithType: FieldReader<T, Object>.CopyTo(KeyValuePair<RuntimeFieldHandle, Object>[], Int32)
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.CopyTo(System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, System.Object>[], System.Int32)
  nameWithType.vb: FieldReader(Of T, Object).CopyTo(KeyValuePair(Of RuntimeFieldHandle, Object)(), Int32)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).CopyTo(System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, System.Object)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of RuntimeFieldHandle, Object)(), Int32)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.CopyTo(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}[],System.Int32)
    name: CopyTo
    nameWithType: FieldReader<T, Object>.CopyTo
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.CopyTo(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}[],System.Int32)
    name: CopyTo
    nameWithType: FieldReader(Of T, Object).CopyTo
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.GetEnumerator
  commentId: M:RW_ModularizationWeapon.FieldReader{`0,System.Object}.GetEnumerator
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.GetEnumerator
  name: GetEnumerator()
  nameWithType: FieldReader<T, Object>.GetEnumerator()
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.GetEnumerator()
  nameWithType.vb: FieldReader(Of T, Object).GetEnumerator()
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).GetEnumerator()
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.GetEnumerator
    name: GetEnumerator
    nameWithType: FieldReader<T, Object>.GetEnumerator
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.GetEnumerator
    name: GetEnumerator
    nameWithType: FieldReader(Of T, Object).GetEnumerator
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.Remove(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object})
  commentId: M:RW_ModularizationWeapon.FieldReader{`0,System.Object}.Remove(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,System.Object})
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.Remove(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  name: Remove(KeyValuePair<RuntimeFieldHandle, Object>)
  nameWithType: FieldReader<T, Object>.Remove(KeyValuePair<RuntimeFieldHandle, Object>)
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Remove(System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, System.Object>)
  nameWithType.vb: FieldReader(Of T, Object).Remove(KeyValuePair(Of RuntimeFieldHandle, Object))
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Remove(System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, System.Object))
  name.vb: Remove(KeyValuePair(Of RuntimeFieldHandle, Object))
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.Remove(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
    name: Remove
    nameWithType: FieldReader<T, Object>.Remove
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.Remove(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
    name: Remove
    nameWithType: FieldReader(Of T, Object).Remove
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:RW_ModularizationWeapon.FieldReader{`0,System.Object}.System#Collections#IEnumerable#GetEnumerator
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: FieldReader<T, Object>.IEnumerable.GetEnumerator()
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: FieldReader(Of T, Object).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: FieldReader<T, Object>.IEnumerable.GetEnumerator
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: FieldReader(Of T, Object).System.Collections.IEnumerable.GetEnumerator
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.CalcValue(System.Func{System.Object,System.Object,System.Reflection.FieldInfo,System.Object},System.Object)
  commentId: M:RW_ModularizationWeapon.FieldReader{`0,System.Object}.CalcValue(System.Func{System.Object,System.Object,System.Reflection.FieldInfo,System.Object},System.Object)
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`1)
  name: CalcValue(Func<Object, Object, FieldInfo, Object>, Object)
  nameWithType: FieldReader<T, Object>.CalcValue(Func<Object, Object, FieldInfo, Object>, Object)
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.CalcValue(System.Func<System.Object, System.Object, System.Reflection.FieldInfo, System.Object>, System.Object)
  nameWithType.vb: FieldReader(Of T, Object).CalcValue(Func(Of Object, Object, FieldInfo, Object), Object)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).CalcValue(System.Func(Of System.Object, System.Object, System.Reflection.FieldInfo, System.Object), System.Object)
  name.vb: CalcValue(Func(Of Object, Object, FieldInfo, Object), Object)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`1)
    name: CalcValue
    nameWithType: FieldReader<T, Object>.CalcValue
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.CalcValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`1)
    name: CalcValue
    nameWithType: FieldReader(Of T, Object).CalcValue
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).CalcValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.CalcValue(System.Func{System.Object,System.Object,System.Reflection.FieldInfo,System.Object},{T})
  commentId: M:RW_ModularizationWeapon.FieldReader{`0,System.Object}.CalcValue(System.Func{System.Object,System.Object,System.Reflection.FieldInfo,System.Object},`0)
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`0)
  name: CalcValue(Func<Object, Object, FieldInfo, Object>, T)
  nameWithType: FieldReader<T, Object>.CalcValue(Func<Object, Object, FieldInfo, Object>, T)
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.CalcValue(System.Func<System.Object, System.Object, System.Reflection.FieldInfo, System.Object>, T)
  nameWithType.vb: FieldReader(Of T, Object).CalcValue(Func(Of Object, Object, FieldInfo, Object), T)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).CalcValue(System.Func(Of System.Object, System.Object, System.Reflection.FieldInfo, System.Object), T)
  name.vb: CalcValue(Func(Of Object, Object, FieldInfo, Object), T)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`0)
    name: CalcValue
    nameWithType: FieldReader<T, Object>.CalcValue
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.CalcValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`0)
    name: CalcValue
    nameWithType: FieldReader(Of T, Object).CalcValue
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).CalcValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.CalcValue``1(System.Func{System.Object,System.Object,System.Reflection.FieldInfo,System.Object},{TFR},{TFR})
  commentId: M:RW_ModularizationWeapon.FieldReader{`0,System.Object}.CalcValue``1(System.Func{System.Object,System.Object,System.Reflection.FieldInfo,System.Object},``0,``0)
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.CalcValue``1(System.Func{`1,`1,System.Reflection.FieldInfo,`1},``0,``0)
  name: CalcValue<TFR>(Func<Object, Object, FieldInfo, Object>, TFR, TFR)
  nameWithType: FieldReader<T, Object>.CalcValue<TFR>(Func<Object, Object, FieldInfo, Object>, TFR, TFR)
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.CalcValue<TFR>(System.Func<System.Object, System.Object, System.Reflection.FieldInfo, System.Object>, TFR, TFR)
  nameWithType.vb: FieldReader(Of T, Object).CalcValue(Of TFR)(Func(Of Object, Object, FieldInfo, Object), TFR, TFR)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).CalcValue(Of TFR)(System.Func(Of System.Object, System.Object, System.Reflection.FieldInfo, System.Object), TFR, TFR)
  name.vb: CalcValue(Of TFR)(Func(Of Object, Object, FieldInfo, Object), TFR, TFR)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.CalcValue``1(System.Func{`1,`1,System.Reflection.FieldInfo,`1},``0,``0)
    name: CalcValue<TFR>
    nameWithType: FieldReader<T, Object>.CalcValue<TFR>
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.CalcValue<TFR>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFR
    nameWithType: TFR
    fullName: TFR
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFR
    nameWithType: TFR
    fullName: TFR
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.CalcValue``1(System.Func{`1,`1,System.Reflection.FieldInfo,`1},``0,``0)
    name: CalcValue(Of TFR)
    nameWithType: FieldReader(Of T, Object).CalcValue(Of TFR)
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).CalcValue(Of TFR)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFR
    nameWithType: TFR
    fullName: TFR
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFR
    nameWithType: TFR
    fullName: TFR
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader{{T},System.Object}.LoadDataFromXmlCustom(System.Xml.XmlNode)
  commentId: M:RW_ModularizationWeapon.FieldReader{`0,System.Object}.LoadDataFromXmlCustom(System.Xml.XmlNode)
  parent: RW_ModularizationWeapon.FieldReader{{T},System.Object}
  definition: RW_ModularizationWeapon.FieldReader`2.LoadDataFromXmlCustom(System.Xml.XmlNode)
  name: LoadDataFromXmlCustom(XmlNode)
  nameWithType: FieldReader<T, Object>.LoadDataFromXmlCustom(XmlNode)
  fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.LoadDataFromXmlCustom(System.Xml.XmlNode)
  nameWithType.vb: FieldReader(Of T, Object).LoadDataFromXmlCustom(XmlNode)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, System.Object).LoadDataFromXmlCustom(System.Xml.XmlNode)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.LoadDataFromXmlCustom(System.Xml.XmlNode)
    name: LoadDataFromXmlCustom
    nameWithType: FieldReader<T, Object>.LoadDataFromXmlCustom
    fullName: RW_ModularizationWeapon.FieldReader<T, System.Object>.LoadDataFromXmlCustom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    nameWithType: XmlNode
    fullName: System.Xml.XmlNode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.LoadDataFromXmlCustom(System.Xml.XmlNode)
    name: LoadDataFromXmlCustom
    nameWithType: FieldReader(Of T, Object).LoadDataFromXmlCustom
    fullName: RW_ModularizationWeapon.FieldReader(Of T, System.Object).LoadDataFromXmlCustom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    nameWithType: XmlNode
    fullName: System.Xml.XmlNode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
  commentId: M:RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
  parent: RW_ModularizationWeapon.Tools.ToolsFunction
  definition: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
  name: LogAllField()
  nameWithType: ToolsFunction.LogAllField()
  fullName: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField()
  spec.csharp:
  - uid: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
    name: LogAllField
    nameWithType: ToolsFunction.LogAllField
    fullName: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
    name: LogAllField
    nameWithType: ToolsFunction.LogAllField
    fullName: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: RW_ModularizationWeapon.FieldReader`2
  commentId: T:RW_ModularizationWeapon.FieldReader`2
  parent: RW_ModularizationWeapon
  name: FieldReader<T, TV>
  nameWithType: FieldReader<T, TV>
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>
  nameWithType.vb: FieldReader(Of T, TV)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV)
  name.vb: FieldReader(Of T, TV)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2
    name: FieldReader
    nameWithType: FieldReader
    fullName: RW_ModularizationWeapon.FieldReader
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2
    name: FieldReader
    nameWithType: FieldReader
    fullName: RW_ModularizationWeapon.FieldReader
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: RW_ModularizationWeapon.FieldReader`2.UsedType
  commentId: P:RW_ModularizationWeapon.FieldReader`2.UsedType
  name: UsedType
  nameWithType: FieldReader<T, TV>.UsedType
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.UsedType
  nameWithType.vb: FieldReader(Of T, TV).UsedType
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).UsedType
- uid: RW_ModularizationWeapon.FieldReader`2.DefaultValue
  commentId: P:RW_ModularizationWeapon.FieldReader`2.DefaultValue
  name: DefaultValue
  nameWithType: FieldReader<T, TV>.DefaultValue
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.DefaultValue
  nameWithType.vb: FieldReader(Of T, TV).DefaultValue
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).DefaultValue
- uid: RW_ModularizationWeapon.FieldReader`2.HasDefaultValue
  commentId: P:RW_ModularizationWeapon.FieldReader`2.HasDefaultValue
  name: HasDefaultValue
  nameWithType: FieldReader<T, TV>.HasDefaultValue
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.HasDefaultValue
  nameWithType.vb: FieldReader(Of T, TV).HasDefaultValue
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).HasDefaultValue
- uid: RW_ModularizationWeapon.FieldReader`2.Item(System.RuntimeFieldHandle)
  commentId: P:RW_ModularizationWeapon.FieldReader`2.Item(System.RuntimeFieldHandle)
  isExternal: true
  name: Item[RuntimeFieldHandle]
  nameWithType: FieldReader<T, TV>.Item[RuntimeFieldHandle]
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Item[System.RuntimeFieldHandle]
  nameWithType.vb: FieldReader(Of T, TV).Item(RuntimeFieldHandle)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Item(System.RuntimeFieldHandle)
  name.vb: Item(RuntimeFieldHandle)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.Item(System.RuntimeFieldHandle)
    name: Item
    nameWithType: FieldReader<T, TV>.Item
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.Item(System.RuntimeFieldHandle)
    name: Item
    nameWithType: FieldReader(Of T, TV).Item
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.Keys
  commentId: P:RW_ModularizationWeapon.FieldReader`2.Keys
  name: Keys
  nameWithType: FieldReader<T, TV>.Keys
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Keys
  nameWithType.vb: FieldReader(Of T, TV).Keys
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Keys
- uid: RW_ModularizationWeapon.FieldReader`2.Values
  commentId: P:RW_ModularizationWeapon.FieldReader`2.Values
  name: Values
  nameWithType: FieldReader<T, TV>.Values
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Values
  nameWithType.vb: FieldReader(Of T, TV).Values
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Values
- uid: RW_ModularizationWeapon.FieldReader`2.Count
  commentId: P:RW_ModularizationWeapon.FieldReader`2.Count
  name: Count
  nameWithType: FieldReader<T, TV>.Count
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Count
  nameWithType.vb: FieldReader(Of T, TV).Count
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Count
- uid: RW_ModularizationWeapon.FieldReader`2.IsReadOnly
  commentId: P:RW_ModularizationWeapon.FieldReader`2.IsReadOnly
  name: IsReadOnly
  nameWithType: FieldReader<T, TV>.IsReadOnly
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.IsReadOnly
  nameWithType.vb: FieldReader(Of T, TV).IsReadOnly
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).IsReadOnly
- uid: RW_ModularizationWeapon.FieldReader`2.Add(System.RuntimeFieldHandle,`1)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.Add(System.RuntimeFieldHandle,`1)
  isExternal: true
  name: Add(RuntimeFieldHandle, TV)
  nameWithType: FieldReader<T, TV>.Add(RuntimeFieldHandle, TV)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Add(System.RuntimeFieldHandle, TV)
  nameWithType.vb: FieldReader(Of T, TV).Add(RuntimeFieldHandle, TV)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Add(System.RuntimeFieldHandle, TV)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.Add(System.RuntimeFieldHandle,`1)
    name: Add
    nameWithType: FieldReader<T, TV>.Add
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.Add(System.RuntimeFieldHandle,`1)
    name: Add
    nameWithType: FieldReader(Of T, TV).Add
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.Clear
  commentId: M:RW_ModularizationWeapon.FieldReader`2.Clear
  name: Clear()
  nameWithType: FieldReader<T, TV>.Clear()
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Clear()
  nameWithType.vb: FieldReader(Of T, TV).Clear()
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Clear()
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.Clear
    name: Clear
    nameWithType: FieldReader<T, TV>.Clear
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.Clear
    name: Clear
    nameWithType: FieldReader(Of T, TV).Clear
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.ContainsKey(System.RuntimeFieldHandle)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.ContainsKey(System.RuntimeFieldHandle)
  isExternal: true
  name: ContainsKey(RuntimeFieldHandle)
  nameWithType: FieldReader<T, TV>.ContainsKey(RuntimeFieldHandle)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.ContainsKey(System.RuntimeFieldHandle)
  nameWithType.vb: FieldReader(Of T, TV).ContainsKey(RuntimeFieldHandle)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).ContainsKey(System.RuntimeFieldHandle)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.ContainsKey(System.RuntimeFieldHandle)
    name: ContainsKey
    nameWithType: FieldReader<T, TV>.ContainsKey
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.ContainsKey(System.RuntimeFieldHandle)
    name: ContainsKey
    nameWithType: FieldReader(Of T, TV).ContainsKey
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.Remove(System.RuntimeFieldHandle)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.Remove(System.RuntimeFieldHandle)
  isExternal: true
  name: Remove(RuntimeFieldHandle)
  nameWithType: FieldReader<T, TV>.Remove(RuntimeFieldHandle)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Remove(System.RuntimeFieldHandle)
  nameWithType.vb: FieldReader(Of T, TV).Remove(RuntimeFieldHandle)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Remove(System.RuntimeFieldHandle)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.Remove(System.RuntimeFieldHandle)
    name: Remove
    nameWithType: FieldReader<T, TV>.Remove
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.Remove(System.RuntimeFieldHandle)
    name: Remove
    nameWithType: FieldReader(Of T, TV).Remove
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.TryGetValue(System.RuntimeFieldHandle,`1@)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.TryGetValue(System.RuntimeFieldHandle,`1@)
  isExternal: true
  name: TryGetValue(RuntimeFieldHandle, TV)
  nameWithType: FieldReader<T, TV>.TryGetValue(RuntimeFieldHandle, TV)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.TryGetValue(System.RuntimeFieldHandle, TV)
  nameWithType.vb: FieldReader(Of T, TV).TryGetValue(RuntimeFieldHandle, TV)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).TryGetValue(System.RuntimeFieldHandle, TV)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.TryGetValue(System.RuntimeFieldHandle,`1@)
    name: TryGetValue
    nameWithType: FieldReader<T, TV>.TryGetValue
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.TryGetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.TryGetValue(System.RuntimeFieldHandle,`1@)
    name: TryGetValue
    nameWithType: FieldReader(Of T, TV).TryGetValue
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).TryGetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.Clone
  commentId: M:RW_ModularizationWeapon.FieldReader`2.Clone
  name: Clone()
  nameWithType: FieldReader<T, TV>.Clone()
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Clone()
  nameWithType.vb: FieldReader(Of T, TV).Clone()
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Clone()
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.Clone
    name: Clone
    nameWithType: FieldReader<T, TV>.Clone
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.Clone
    name: Clone
    nameWithType: FieldReader(Of T, TV).Clone
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.UsedTypeUpdate
  commentId: M:RW_ModularizationWeapon.FieldReader`2.UsedTypeUpdate
  name: UsedTypeUpdate()
  nameWithType: FieldReader<T, TV>.UsedTypeUpdate()
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.UsedTypeUpdate()
  nameWithType.vb: FieldReader(Of T, TV).UsedTypeUpdate()
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).UsedTypeUpdate()
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.UsedTypeUpdate
    name: UsedTypeUpdate
    nameWithType: FieldReader<T, TV>.UsedTypeUpdate
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.UsedTypeUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.UsedTypeUpdate
    name: UsedTypeUpdate
    nameWithType: FieldReader(Of T, TV).UsedTypeUpdate
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).UsedTypeUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.Add(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  commentId: M:RW_ModularizationWeapon.FieldReader`2.Add(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  isExternal: true
  name: Add(KeyValuePair<RuntimeFieldHandle, TV>)
  nameWithType: FieldReader<T, TV>.Add(KeyValuePair<RuntimeFieldHandle, TV>)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Add(System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>)
  nameWithType.vb: FieldReader(Of T, TV).Add(KeyValuePair(Of RuntimeFieldHandle, TV))
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Add(System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV))
  name.vb: Add(KeyValuePair(Of RuntimeFieldHandle, TV))
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.Add(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
    name: Add
    nameWithType: FieldReader<T, TV>.Add
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.Add(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
    name: Add
    nameWithType: FieldReader(Of T, TV).Add
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.Contains(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  commentId: M:RW_ModularizationWeapon.FieldReader`2.Contains(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  isExternal: true
  name: Contains(KeyValuePair<RuntimeFieldHandle, TV>)
  nameWithType: FieldReader<T, TV>.Contains(KeyValuePair<RuntimeFieldHandle, TV>)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Contains(System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>)
  nameWithType.vb: FieldReader(Of T, TV).Contains(KeyValuePair(Of RuntimeFieldHandle, TV))
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Contains(System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV))
  name.vb: Contains(KeyValuePair(Of RuntimeFieldHandle, TV))
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.Contains(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
    name: Contains
    nameWithType: FieldReader<T, TV>.Contains
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.Contains(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
    name: Contains
    nameWithType: FieldReader(Of T, TV).Contains
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.CopyTo(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}[],System.Int32)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.CopyTo(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}[],System.Int32)
  isExternal: true
  name: CopyTo(KeyValuePair<RuntimeFieldHandle, TV>[], Int32)
  nameWithType: FieldReader<T, TV>.CopyTo(KeyValuePair<RuntimeFieldHandle, TV>[], Int32)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.CopyTo(System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>[], System.Int32)
  nameWithType.vb: FieldReader(Of T, TV).CopyTo(KeyValuePair(Of RuntimeFieldHandle, TV)(), Int32)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).CopyTo(System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of RuntimeFieldHandle, TV)(), Int32)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.CopyTo(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}[],System.Int32)
    name: CopyTo
    nameWithType: FieldReader<T, TV>.CopyTo
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.CopyTo(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1}[],System.Int32)
    name: CopyTo
    nameWithType: FieldReader(Of T, TV).CopyTo
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.GetEnumerator
  commentId: M:RW_ModularizationWeapon.FieldReader`2.GetEnumerator
  name: GetEnumerator()
  nameWithType: FieldReader<T, TV>.GetEnumerator()
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.GetEnumerator()
  nameWithType.vb: FieldReader(Of T, TV).GetEnumerator()
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).GetEnumerator()
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.GetEnumerator
    name: GetEnumerator
    nameWithType: FieldReader<T, TV>.GetEnumerator
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.GetEnumerator
    name: GetEnumerator
    nameWithType: FieldReader(Of T, TV).GetEnumerator
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.Remove(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  commentId: M:RW_ModularizationWeapon.FieldReader`2.Remove(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
  isExternal: true
  name: Remove(KeyValuePair<RuntimeFieldHandle, TV>)
  nameWithType: FieldReader<T, TV>.Remove(KeyValuePair<RuntimeFieldHandle, TV>)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Remove(System.Collections.Generic.KeyValuePair<System.RuntimeFieldHandle, TV>)
  nameWithType.vb: FieldReader(Of T, TV).Remove(KeyValuePair(Of RuntimeFieldHandle, TV))
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).Remove(System.Collections.Generic.KeyValuePair(Of System.RuntimeFieldHandle, TV))
  name.vb: Remove(KeyValuePair(Of RuntimeFieldHandle, TV))
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.Remove(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
    name: Remove
    nameWithType: FieldReader<T, TV>.Remove
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.Remove(System.Collections.Generic.KeyValuePair{System.RuntimeFieldHandle,`1})
    name: Remove
    nameWithType: FieldReader(Of T, TV).Remove
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.System#Collections#IEnumerable#GetEnumerator
  commentId: M:RW_ModularizationWeapon.FieldReader`2.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: FieldReader<T, TV>.IEnumerable.GetEnumerator()
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: FieldReader(Of T, TV).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: FieldReader<T, TV>.IEnumerable.GetEnumerator
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: FieldReader(Of T, TV).System.Collections.IEnumerable.GetEnumerator
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`1)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`1)
  isExternal: true
  name: CalcValue(Func<TV, TV, FieldInfo, TV>, TV)
  nameWithType: FieldReader<T, TV>.CalcValue(Func<TV, TV, FieldInfo, TV>, TV)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.CalcValue(System.Func<TV, TV, System.Reflection.FieldInfo, TV>, TV)
  nameWithType.vb: FieldReader(Of T, TV).CalcValue(Func(Of TV, TV, FieldInfo, TV), TV)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).CalcValue(System.Func(Of TV, TV, System.Reflection.FieldInfo, TV), TV)
  name.vb: CalcValue(Func(Of TV, TV, FieldInfo, TV), TV)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`1)
    name: CalcValue
    nameWithType: FieldReader<T, TV>.CalcValue
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.CalcValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`1)
    name: CalcValue
    nameWithType: FieldReader(Of T, TV).CalcValue
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).CalcValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`0)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`0)
  isExternal: true
  name: CalcValue(Func<TV, TV, FieldInfo, TV>, T)
  nameWithType: FieldReader<T, TV>.CalcValue(Func<TV, TV, FieldInfo, TV>, T)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.CalcValue(System.Func<TV, TV, System.Reflection.FieldInfo, TV>, T)
  nameWithType.vb: FieldReader(Of T, TV).CalcValue(Func(Of TV, TV, FieldInfo, TV), T)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).CalcValue(System.Func(Of TV, TV, System.Reflection.FieldInfo, TV), T)
  name.vb: CalcValue(Func(Of TV, TV, FieldInfo, TV), T)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`0)
    name: CalcValue
    nameWithType: FieldReader<T, TV>.CalcValue
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.CalcValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.CalcValue(System.Func{`1,`1,System.Reflection.FieldInfo,`1},`0)
    name: CalcValue
    nameWithType: FieldReader(Of T, TV).CalcValue
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).CalcValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.CalcValue``1(System.Func{`1,`1,System.Reflection.FieldInfo,`1},``0,``0)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.CalcValue``1(System.Func{`1,`1,System.Reflection.FieldInfo,`1},``0,``0)
  isExternal: true
  name: CalcValue<TFR>(Func<TV, TV, FieldInfo, TV>, TFR, TFR)
  nameWithType: FieldReader<T, TV>.CalcValue<TFR>(Func<TV, TV, FieldInfo, TV>, TFR, TFR)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.CalcValue<TFR>(System.Func<TV, TV, System.Reflection.FieldInfo, TV>, TFR, TFR)
  nameWithType.vb: FieldReader(Of T, TV).CalcValue(Of TFR)(Func(Of TV, TV, FieldInfo, TV), TFR, TFR)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).CalcValue(Of TFR)(System.Func(Of TV, TV, System.Reflection.FieldInfo, TV), TFR, TFR)
  name.vb: CalcValue(Of TFR)(Func(Of TV, TV, FieldInfo, TV), TFR, TFR)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.CalcValue``1(System.Func{`1,`1,System.Reflection.FieldInfo,`1},``0,``0)
    name: CalcValue<TFR>
    nameWithType: FieldReader<T, TV>.CalcValue<TFR>
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.CalcValue<TFR>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFR
    nameWithType: TFR
    fullName: TFR
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFR
    nameWithType: TFR
    fullName: TFR
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.CalcValue``1(System.Func{`1,`1,System.Reflection.FieldInfo,`1},``0,``0)
    name: CalcValue(Of TFR)
    nameWithType: FieldReader(Of T, TV).CalcValue(Of TFR)
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).CalcValue(Of TFR)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFR
    nameWithType: TFR
    fullName: TFR
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFR
    nameWithType: TFR
    fullName: TFR
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReader`2.LoadDataFromXmlCustom(System.Xml.XmlNode)
  commentId: M:RW_ModularizationWeapon.FieldReader`2.LoadDataFromXmlCustom(System.Xml.XmlNode)
  isExternal: true
  name: LoadDataFromXmlCustom(XmlNode)
  nameWithType: FieldReader<T, TV>.LoadDataFromXmlCustom(XmlNode)
  fullName: RW_ModularizationWeapon.FieldReader<T, TV>.LoadDataFromXmlCustom(System.Xml.XmlNode)
  nameWithType.vb: FieldReader(Of T, TV).LoadDataFromXmlCustom(XmlNode)
  fullName.vb: RW_ModularizationWeapon.FieldReader(Of T, TV).LoadDataFromXmlCustom(System.Xml.XmlNode)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReader`2.LoadDataFromXmlCustom(System.Xml.XmlNode)
    name: LoadDataFromXmlCustom
    nameWithType: FieldReader<T, TV>.LoadDataFromXmlCustom
    fullName: RW_ModularizationWeapon.FieldReader<T, TV>.LoadDataFromXmlCustom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    nameWithType: XmlNode
    fullName: System.Xml.XmlNode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReader`2.LoadDataFromXmlCustom(System.Xml.XmlNode)
    name: LoadDataFromXmlCustom
    nameWithType: FieldReader(Of T, TV).LoadDataFromXmlCustom
    fullName: RW_ModularizationWeapon.FieldReader(Of T, TV).LoadDataFromXmlCustom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    nameWithType: XmlNode
    fullName: System.Xml.XmlNode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
  commentId: M:RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
  isExternal: true
  name: LogAllField(Object)
  nameWithType: ToolsFunction.LogAllField(Object)
  fullName: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
  spec.csharp:
  - uid: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
    name: LogAllField
    nameWithType: ToolsFunction.LogAllField
    fullName: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField(System.Object)
    name: LogAllField
    nameWithType: ToolsFunction.LogAllField
    fullName: RW_ModularizationWeapon.Tools.ToolsFunction.LogAllField
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.Tools.ToolsFunction
  commentId: T:RW_ModularizationWeapon.Tools.ToolsFunction
  parent: RW_ModularizationWeapon.Tools
  name: ToolsFunction
  nameWithType: ToolsFunction
  fullName: RW_ModularizationWeapon.Tools.ToolsFunction
- uid: RW_ModularizationWeapon.Tools
  commentId: N:RW_ModularizationWeapon.Tools
  name: RW_ModularizationWeapon.Tools
  nameWithType: RW_ModularizationWeapon.Tools
  fullName: RW_ModularizationWeapon.Tools
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.#ctor*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.#ctor
  name: FieldReaderInstance
  nameWithType: FieldReaderInstance<T>.FieldReaderInstance
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.FieldReaderInstance
  nameWithType.vb: FieldReaderInstance(Of T).FieldReaderInstance
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).FieldReaderInstance
- uid: RW_ModularizationWeapon.FieldReaderInstance`1
  commentId: T:RW_ModularizationWeapon.FieldReaderInstance`1
  parent: RW_ModularizationWeapon
  name: FieldReaderInstance<T>
  nameWithType: FieldReaderInstance<T>
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>
  nameWithType.vb: FieldReaderInstance(Of T)
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T)
  name.vb: FieldReaderInstance(Of T)
  spec.csharp:
  - uid: RW_ModularizationWeapon.FieldReaderInstance`1
    name: FieldReaderInstance
    nameWithType: FieldReaderInstance
    fullName: RW_ModularizationWeapon.FieldReaderInstance
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: RW_ModularizationWeapon.FieldReaderInstance`1
    name: FieldReaderInstance
    nameWithType: FieldReaderInstance
    fullName: RW_ModularizationWeapon.FieldReaderInstance
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.Count*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.Count
  name: Count
  nameWithType: FieldReaderInstance<T>.Count
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.Count
  nameWithType.vb: FieldReaderInstance(Of T).Count
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.Keys*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.Keys
  name: Keys
  nameWithType: FieldReaderInstance<T>.Keys
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.Keys
  nameWithType.vb: FieldReaderInstance(Of T).Keys
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).Keys
- uid: System.Collections.Generic.ICollection{System.RuntimeFieldHandle}
  commentId: T:System.Collections.Generic.ICollection{System.RuntimeFieldHandle}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<RuntimeFieldHandle>
  nameWithType: ICollection<RuntimeFieldHandle>
  fullName: System.Collections.Generic.ICollection<System.RuntimeFieldHandle>
  nameWithType.vb: ICollection(Of RuntimeFieldHandle)
  fullName.vb: System.Collections.Generic.ICollection(Of System.RuntimeFieldHandle)
  name.vb: ICollection(Of RuntimeFieldHandle)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.RuntimeFieldHandle
    name: RuntimeFieldHandle
    nameWithType: RuntimeFieldHandle
    fullName: System.RuntimeFieldHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.Values*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.Values
  name: Values
  nameWithType: FieldReaderInstance<T>.Values
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.Values
  nameWithType.vb: FieldReaderInstance(Of T).Values
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).Values
- uid: System.Collections.Generic.ICollection{System.Object}
  commentId: T:System.Collections.Generic.ICollection{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Object>
  nameWithType: ICollection<Object>
  fullName: System.Collections.Generic.ICollection<System.Object>
  nameWithType.vb: ICollection(Of Object)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object)
  name.vb: ICollection(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.DefaultValue*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.DefaultValue
  name: DefaultValue
  nameWithType: FieldReaderInstance<T>.DefaultValue
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.DefaultValue
  nameWithType.vb: FieldReaderInstance(Of T).DefaultValue
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).DefaultValue
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.HasDefaultValue*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.HasDefaultValue
  name: HasDefaultValue
  nameWithType: FieldReaderInstance<T>.HasDefaultValue
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.HasDefaultValue
  nameWithType.vb: FieldReaderInstance(Of T).HasDefaultValue
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).HasDefaultValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.Item*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.Item
  name: Item
  nameWithType: FieldReaderInstance<T>.Item
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.Item
  nameWithType.vb: FieldReaderInstance(Of T).Item
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).Item
- uid: System.RuntimeFieldHandle
  commentId: T:System.RuntimeFieldHandle
  parent: System
  isExternal: true
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.LoadDataFromXmlCustom*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.LoadDataFromXmlCustom
  name: LoadDataFromXmlCustom
  nameWithType: FieldReaderInstance<T>.LoadDataFromXmlCustom
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.LoadDataFromXmlCustom
  nameWithType.vb: FieldReaderInstance(Of T).LoadDataFromXmlCustom
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).LoadDataFromXmlCustom
- uid: System.Xml.XmlNode
  commentId: T:System.Xml.XmlNode
  parent: System.Xml
  isExternal: true
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.ToString*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.ToString
  name: ToString
  nameWithType: FieldReaderInstance<T>.ToString
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.ToString
  nameWithType.vb: FieldReaderInstance(Of T).ToString
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.ContainsKey*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.ContainsKey
  name: ContainsKey
  nameWithType: FieldReaderInstance<T>.ContainsKey
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.ContainsKey
  nameWithType.vb: FieldReaderInstance(Of T).ContainsKey
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).ContainsKey
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.Add*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.Add
  name: Add
  nameWithType: FieldReaderInstance<T>.Add
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.Add
  nameWithType.vb: FieldReaderInstance(Of T).Add
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).Add
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.Remove*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.Remove
  name: Remove
  nameWithType: FieldReaderInstance<T>.Remove
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.Remove
  nameWithType.vb: FieldReaderInstance(Of T).Remove
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).Remove
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.TryGetValue*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.TryGetValue
  name: TryGetValue
  nameWithType: FieldReaderInstance<T>.TryGetValue
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.TryGetValue
  nameWithType.vb: FieldReaderInstance(Of T).TryGetValue
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).TryGetValue
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.Clear*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.Clear
  name: Clear
  nameWithType: FieldReaderInstance<T>.Clear
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.Clear
  nameWithType.vb: FieldReaderInstance(Of T).Clear
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).Clear
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.Clone*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.Clone
  name: Clone
  nameWithType: FieldReaderInstance<T>.Clone
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.Clone
  nameWithType.vb: FieldReaderInstance(Of T).Clone
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).Clone
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.UsedTypeUpdate*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.UsedTypeUpdate
  name: UsedTypeUpdate
  nameWithType: FieldReaderInstance<T>.UsedTypeUpdate
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.UsedTypeUpdate
  nameWithType.vb: FieldReaderInstance(Of T).UsedTypeUpdate
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).UsedTypeUpdate
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseAnd*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseAnd
  name: BitwiseAnd
  nameWithType: FieldReaderInstance<T>.BitwiseAnd
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.BitwiseAnd
  nameWithType.vb: FieldReaderInstance(Of T).BitwiseAnd
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).BitwiseAnd
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseOr*
  commentId: Overload:RW_ModularizationWeapon.FieldReaderInstance`1.op_BitwiseOr
  name: BitwiseOr
  nameWithType: FieldReaderInstance<T>.BitwiseOr
  fullName: RW_ModularizationWeapon.FieldReaderInstance<T>.BitwiseOr
  nameWithType.vb: FieldReaderInstance(Of T).BitwiseOr
  fullName.vb: RW_ModularizationWeapon.FieldReaderInstance(Of T).BitwiseOr
